<project xmlns:ivy="antlib:fr.jayasoft.ivy.ant" name="freecast" default="test" basedir=".">

	<property file="build-user.properties" />
	<property file="build.properties" />

	<macrodef name="docbook">
		<attribute name="in" />
		<attribute name="out" />
		<attribute name="style" />
		<element name="arguments" optional="true" />
		<sequential>

			<java classname="org.apache.xalan.xslt.Process" fork="true" failonerror="true">
				<jvmarg line="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration" />
				<jvmarg 
line="-Xbootclasspath/p:lib/build-docbook/xercesImpl.jar;lib/build-docbook/xml-apis.jar" />
				<classpath>
					<fileset dir="lib/build-docbook">
						<include name="xalan.jar"/>
					</fileset>
					<pathelement path="${track.docbook.dir}/extensions/xalan25.jar" />
				</classpath>

				<arg line="-IN @{in}" />
				<arg line="-OUT @{out}" />
				<arg line="-XSL @{style}" />
				<arg line="-PARAM admon.graphics 1" />
				<arg line="-PARAM use.extensions 1" />
				<arguments />
			</java>

		</sequential>
	</macrodef>

	<target name="prepare.version">
		<tstamp />
		<property name="project.version" value="${DSTAMP}" />
		<property name="project.fullname" value="freecast-${project.version}" />
	</target>
	
  <target name="prepare.track">
  	<ivy:configure />
  </target>

  <target name="prepare.libraries" depends="prepare.track">
  	<ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="core, runtime, test" />
  	<path id="path.build">
  		<fileset dir="lib/core"/>
  	</path>
  	<path id="path.runtime">
  		<fileset dir="lib/runtime"/>
  		<path refid="path.build"/>
  	</path>
  	<path id="path.test">
  		<fileset dir="lib/test"/>
  		<path refid="path.runtime"/>
  	</path>
  </target>
  
  <target name="prepare.docbook" depends="prepare.track, prepare.docbook.retrieve, prepare.docbook.install">
  	<path id="path.docbook">
  		<fileset dir="lib/build-docbook"/>
  	</path>
		<property name="track.docbook.dir" location="lib/build-docbook/docbook-xsl" />
  </target>
  
  <target name="prepare.docbook.retrieve">
  	<ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="build-docbook" />
  </target>
  
  <target name="prepare.docbook.install.check">
  	<uptodate property="prepare.docbook.install.notRequired"
            srcfile="lib/build-docbook/docbook-xsl.zip"
            targetfile="lib/build-docbook/docbook-xsl/.touch"/>
  </target>
  
  <target name="prepare.docbook.install" 
  	depends="prepare.docbook.install.check" unless="prepare.docbook.install.notRequired">
  	<tempfile property="prepare.docbook.dir"/>
  	<mkdir dir="${prepare.docbook.dir}"/>
  	<unzip src="lib/build-docbook/docbook-xsl.zip" dest="${prepare.docbook.dir}"/>
  	<move todir="lib/build-docbook/docbook-xsl">
  		<fileset dir="${prepare.docbook.dir}"/>
	  	<regexpmapper from="^docbook-xsl-[0-9\.]+/(.*)$$" to="\1"/>
	  </move>
	  <delete dir="${prepare.docbook.dir}"/>
	  <touch file="lib/build-docbook/docbook-xsl/.touch"/>
  </target>

	<target name="clean">
		<delete dir="build" />
		<delete dir="lib" />
		<delete dir="dist" />
		<delete dir="export" />
	</target>

	<target name="build.validate">
		<macrodef name="configvalidate">
			<attribute name="file" />
			<sequential>
				<pathconvert dirsep="/" property="build.validate.xsd.file">
					<path>
						<pathelement location="source/org/kolaka/freecast/config/resources/config.xsd" />
					</path>
				</pathconvert>
				<xmlvalidate lenient="false" failonerror="true" warn="true" file="@{file}">
					<attribute name="http://apache.org/xml/features/validation/schema" value="true" />
					<attribute name="http://xml.org/sax/features/namespaces" value="true" />
					<property name="http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation" value="${build.validate.xsd.file}" />
				</xmlvalidate>
			</sequential>
		</macrodef>

		<!--
		<configvalidate file="source/org/kolaka/freecast/config/resources/defaults-node.xml"/>
		<configvalidate file="source/org/kolaka/freecast/config/resources/defaults-node-swing.xml"/>
		-->
	</target>

	<target name="build.core" depends="prepare.libraries, build.core.classes, build.core.resources" />

	<target name="build.core.classes" depends="build.validate">
		<mkdir dir="${build.core.classes.dir}" />
		<javac target="1.4" source="1.4" srcdir="source" destdir="${build.core.classes.dir}" debug="true">
			<classpath refid="path.build" />
			<exclude name="**/test/*.java" />
		</javac>
	</target>

	<target name="build.core.resources" depends="prepare.version">
		<copy todir="${build.core.classes.dir}">
			<fileset dir="source">
				<include name="**/resources/*" />
				<exclude name="**/*.xcf" />
				<exclude name="**/test/**" />
				<exclude name="org/kolaka/freecast/node/swing/resources/freecast-splash.jpg" />
			</fileset>
		</copy>

		<mkdir dir="build/core/version" />
		<mkdir dir="${build.core.classes.dir}/org/kolaka/freecast/resources" />

		<echo file="build/core/version/version.properties" message="name=${project.version}" />
		<copy todir="${build.core.classes.dir}/org/kolaka/freecast/resources">
			<fileset dir="build/core/version">
				<different targetdir="${build.core.classes.dir}/org/kolaka/freecast/resources" />
			</fileset>
		</copy>

		<copy todir="${build.core.classes.dir}/org/kolaka/freecast/manager/http/resources/data" flatten="true">
			<fileset dir="source/org/kolaka/freecast/www">
				<include name="images/header/freecast.png" />
				<include name="css/start.css" />
				<include name="css/screen.css" />
			</fileset>
		</copy>
	</target>

	<target name="build.etc">
		<mkdir dir="build/etc/console-only" />
		<style in="source/org/kolaka/freecast/log4j.xml" out="build/etc/console-only/log4j.xml" style="source/org/kolaka/freecast/log4j.xsl">
			<param name="file" expression="false" />
		</style>
		<mkdir dir="build/etc/complete" />
		<style in="source/org/kolaka/freecast/log4j.xml" out="build/etc/complete/log4j.xml" style="source/org/kolaka/freecast/log4j.xsl">
			<param name="file" expression="true" />
		</style>
	</target>

	<target name="build.test" depends="prepare.libraries, build.core, build.etc">
		<property name="build.test.classes.dir" value="build/test/classes" />
		<mkdir dir="${build.test.classes.dir}" />
		<javac srcdir="source" destdir="${build.test.classes.dir}" debug="true">
			<classpath refid="path.test" />
			<include name="**/test/*.java" />
		</javac>
		<copy file="source/org/kolaka/freecast/test/log4j.xml" tofile="${build.test.classes.dir}/log4j.xml" />
		<copy todir="${build.test.classes.dir}">
			<fileset dir="source">
				<include name="**/test/resources/*" />
			</fileset>
		</copy>
	</target>

	<target name="build" depends="build.core" />

	<target name="build.changelog">
  	<ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="build-xmlreleasenotes" />
  	
  	<taskdef classname="org.xrn.ant.XMLReleaseNotes" name="xrn">
  		<classpath>
  			<fileset dir="lib/build-xmlreleasenotes"/>
  		</classpath>
  	</taskdef>

  	<property name="build.changelog.xrn.dir" value="lib/build-xmlreleasenotes/xmlreleasenotes"/>
		<mkdir dir="${build.changelog.xrn.dir}" />
		<xrn destination="${build.changelog.xrn.dir}" deploy="true" />

		<mkdir dir="build/xmlreleasenotes"/>

		<style in="source/org/kolaka/freecast/changelog.xml" out="build/xmlreleasenotes/changelog.html" style="${build.changelog.xrn.dir}/XMLReleaseNotes2HTML.xsl" />

		<mkdir dir="build/changelog"/>

		<tidy dest="build/changelog" failonerror="false" encoding="latin1">
			<filesets>
				<fileset dir="build/xmlreleasenotes"/>
			</filesets>
		</tidy>
		
		<copy tofile="build/changelog/stylesheet.css" file="${build.changelog.xrn.dir}/XMLReleaseNotes.css" />
	</target>

	<target name="build.docs" depends="build.docs.api, build.docs.xref, build.docs.coverage, build.docs.userguide" />

	<target name="build.docs.api.check">
		<uptodate property="build.docs.api.notRequired" targetfile="build/docs/api/.touch">
			<srcfiles dir="source">
				<include name="**/*.java" />
				<include name="**/package.html" />
				<include name="docfiles/**" />
			</srcfiles>
		</uptodate>
	</target>

	<target name="build.docs.api" depends="prepare.libraries, build.docs.api.check" unless="build.docs.api.notRequired">
		<mkdir dir="build/docs/api" />

		<javadoc packagenames="org.kolaka.freecast.*" sourcepath="source" destdir="build/docs/api" author="true" use="true">
			<link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
			<classpath refid="path.test" />
		</javadoc>

		<touch file="build/docs/api/.touch" />
	</target>

	<target name="build.docs.userguide" depends="build.docs.userguide.html,build.docs.userguide.pdf" />

	<target name="build.docs.userguide.prepare" depends="prepare.docbook, prepare.version">
		<mkdir dir="build/docs/userguide" />
		<tstamp>
			<format property="build.docs.userguide.pubdate" pattern="EEEE, MMMM d yyyy" locale="en" />
		</tstamp>
		<copy todir="build/docs/userguide" flatten="true">
			<fileset dir="source">
				<include name="org/kolaka/freecast/userguide/userguide.xml" />
				<include name="org/kolaka/freecast/userguide/gpl.xml" />
			</fileset>
			<filterset>
				<filter token="pubdate" value="${build.docs.userguide.pubdate}" />
				<filter token="version" value="${project.version}" />
			</filterset>
		</copy>
		<copy todir="build/docs/userguide" flatten="true">
			<fileset dir="source">
				<include name="org/kolaka/freecast/userguide/*.xsl" />
			</fileset>
			<filterset>
				<filter token="docbook.xsl.dir" value="${track.docbook.dir}" />
			</filterset>
		</copy>
		<copy todir="build/docs/userguide">
			<fileset dir="source/org/kolaka/freecast/config/resources">
				<include name="defaults-tracker.xml" />
			</fileset>
			<fileset dir="source/org/kolaka/freecast/config">
				<include name="samples/**" />
			</fileset>
			<filterchain>
				<!--
				<tokenfilter>
					<filetokenizer/>
					<replaceregex pattern="(.*)"
	                    flags="s"
	                    replace="&lt;programlisting&gt;&lt;![CDATA[\1]]&gt;&lt;/programlisting&gt;"/>
				</tokenfilter>
				-->
				<tokenfilter>
					<replaceregex pattern="\t" flags="gs" replace="  " />
				</tokenfilter>
			</filterchain>
		</copy>
		<copy todir="build/docs/userguide/images">
			<fileset dir="${track.docbook.dir}/images">
				<include name="**/*.png" />
				<present targetdir="source/org/kolaka/freecast/userguide/images" present="srconly" />
			</fileset>
			<fileset dir="source/org/kolaka/freecast/userguide/images" />
		</copy>
		<copy todir="build/docs/userguide/images">
			<fileset dir="source/org/kolaka/freecast/node/swing/install">
				<include name="screenshot-linux-20050322*.png" />
				<include name="screenshot-linux-20050911*.png" />
			</fileset>
			<fileset dir="source/org/kolaka/freecast/manager/gui/install">
				<include name="manager*-screenshot-linux-20050911*.png" />
				<include name="manager*-screenshot-linux-20060513*.png" />
			</fileset>
			<mapper type="regexp" from="^(.*)-[0-9]+(.*)" to="\1\2" />
		</copy>
		<copy todir="build/docs/userguide/images" flatten="true">
			<fileset dir="source/org/kolaka/freecast/node/swing/install">
				<include name="jws/jws15*" />
			</fileset>
		</copy>
	</target>

	<target name="build.docs.userguide.html.validate" depends="build.docs.userguide.html.check" unless="build.docs.userguide.html.notRequired">
		<xmlvalidate failonerror="yes" lenient="yes" warn="yes" file="build/docs/userguide/userguide.xml">
		  <!--
		  <dtd publicId="-//OASIS//DTD DocBook XML V4.1.2//EN"
			   location="${track.docbook.dtd.dir}/docbookx.dtd"/>
		  -->	   
		</xmlvalidate>
	</target>

	<target name="build.docs.userguide.html.check">
		<uptodate property="build.docs.userguide.html.notRequired" targetfile="build/docs/userguide/index.html">
			<srcfiles dir="build/docs/userguide" />
		</uptodate>
	</target>

	<target name="build.docs.userguide.html" depends="build.docs.userguide.prepare, build.docs.userguide.html.check, build.docs.userguide.html.validate, build.docs.userguide.html.copy" unless="build.docs.userguide.html.notRequired">
		<docbook in="build/docs/userguide/userguide.xml" out="build/docs/userguide/index.html" style="build/docs/userguide/userguide-html.xsl">
			<arguments>
				<arg line="-PARAM hunker.output.encoding UTF-8" />
				<arg line="-PARAM chunk.tocs.and.lots 1" />
				<arg line="-PARAM html.stylesheet css/screen.css" />
				<arg line="-PARAM use.id.as.filename 1" />
				<arg line="-PARAM navig.graphics 1" />
				<arg line="-PARAM navig.graphics.extension .png" />
				<arg line="-PARAM callouts.extension 1" />
				<arg line="-PARAM textinsert.extension 1" />
				<arg line="-PARAM callout.defaultcolumn 40" />
				<arg line="-PARAM callout.graphics 1" />
				<arg line="-PARAM ignore.image.scaling 1"/>
			</arguments>
		</docbook>
	</target>

	<target name="build.docs.userguide.html.copy">
		<copy todir="build/docs/userguide">
			<fileset dir="source/org/kolaka/freecast/userguide">
				<include name="css/*" />
			</fileset>
		</copy>
	</target>

	<target name="build.docs.userguide.pdf.check">
		<uptodate property="build.docs.userguide.pdf.notRequired" targetfile="build/docs/userguide/userguide.pdf">
			<srcfiles dir="build/docs/userguide">
				<include name="**/*.xml" />
			</srcfiles>
		</uptodate>
	</target>

	<target name="build.docs.userguide.pdf" depends="build.docs.userguide.prepare, build.docs.userguide.pdf.check" unless="build.docs.userguide.pdf.notRequired">
		<docbook in="build/docs/userguide/userguide.xml" out="build/docs/userguide/userguide.fo" style="${track.docbook.dir}/fo/docbook.xsl">
			<arguments>
				<arg line="-PARAM paper.type A4" />
				<arg line="-PARAM fop.extensions 1"/>
				<arg line="-PARAM double.sided 1"/>
			</arguments>
		</docbook>

		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="lib/build-docbook" includes="*.jar"/>
			</classpath>
		</taskdef>
		<fop format="application/pdf" fofile="build/docs/userguide/userguide.fo" outfile="build/docs/userguide/userguide.pdf" basedir="build/docs/userguide" />
	</target>

	<target name="build.docs.xref.check">
		<uptodate property="build.docs.xref.notRequired" targetfile="build/docs/xref/.touch">
			<srcfiles dir="source">
				<include name="**/*.java" />
			</srcfiles>
		</uptodate>
	</target>

	<target name="build.docs.xref" depends="build.docs.xref.check" unless="build.docs.xref.notRequired">
  	<ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="build-antjxr" />
    <unzip dest="lib/build-antjxr">
    	<fileset dir="lib/build-antjxr" includes="ant-jxr-data*.zip"/>
    </unzip>
    <taskdef name="jxr" classname="org.kolaka.ant.jxr.Jxr">
			<classpath>
				<fileset dir="lib/build-antjxr"/>
			</classpath>    
    </taskdef>

		<mkdir dir="build/docs/xref" />

		<jxr sourcedir="source" destdir="build/docs/xref" templatedir="lib/build-antjxr/templates" windowTitle="Kolaka - FreeCast" docTitle="FreeCast" bottom="Copyright 2004-2006. Alban Peignier" />

		<copy todir="build/docs/xref">
			<fileset dir="lib/build-antjxr/resources" />
		</copy>

		<touch file="build/docs/xref/.touch" />
	</target>

	<target name="build.docs.coverage.check">
		<uptodate property="build.docs.coverage.notRequired" targetfile="build/docs/coverage/.touch">
			<srcfiles dir="source">
				<include name="**/*.java" />
			</srcfiles>
			<srcfiles dir="${build.core.classes.dir}" />
		</uptodate>
	</target>

	<target name="build.docs.coverage" depends="prepare.libraries, build.test, build.docs.coverage.check" unless="build.docs.coverage.notRequired" if="build.docs.coverage.required">
		<taskdef resource="tasks.properties">
			<classpath refid="path.coverage" />
		</taskdef>

		<mkdir dir="build/coverage" />

		<instrument todir="build/coverage">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${build.core.classes.dir}">
				<include name="**/*.class" />
				<exclude name="**/test/*.class" />
				<exclude name="**/Main.class" />
				<exclude name="**/swing/*.class" />
				<exclude name="**/*Exception.class" />
				<exclude name="**/RMITracker_*.class" />
			</fileset>
		</instrument>

		<mkdir dir="build/docs/coverage" />
		<junit printsummary="no" haltonfailure="no" includeantruntime="yes" fork="yes">
			<batchtest todir="build/docs/coverage">
				<fileset dir="source">
					<include name="**/test/*Test.java" />
					<include name="**/test/*TestSuite.java" />
					<exclude name="**/test/*BaseTest.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement path="build/coverage" />
				<pathelement path="${build.core.classes.dir}" />
				<pathelement path="${build.test.classes.dir}" />
				<path refid="path.coverage" />
			</classpath>
		</junit>

		<report srcdir="source" destdir="build/docs/coverage" />

		<touch file="build/docs/coverage/.touch" />
	</target>



	<target name="build.www">
		<property name="build.www.dir" location="build/www" />
		<mkdir dir="${build.www.dir}" />

		<property name="source.www.dir" location="source/org/kolaka/freecast/www" />
		<patternset id="build.www.xml.patternset">
			<include name="*.xml" />
			<exclude name="start*.xml" />
		</patternset>

		<xmlvalidate lenient="true" failonerror="true" warn="true">
			<fileset dir="${source.www.dir}">
				<include name="*.xml" />
			</fileset>
		</xmlvalidate>

		<xslt basedir="${source.www.dir}" destdir="${build.www.dir}" style="${source.www.dir}/template.xsl">
			<param name="lang" expression="en" />
			<mapper type="glob" from="*.xml" to="*.html.en" />
			<patternset refid="build.www.xml.patternset" />
		</xslt>
		<xslt basedir="${source.www.dir}" destdir="${build.www.dir}" style="${source.www.dir}/template.xsl">
			<param name="lang" expression="fr" />
			<mapper type="glob" from="*.xml" to="*.html.fr" />
			<patternset refid="build.www.xml.patternset" />
		</xslt>
		<xslt basedir="${source.www.dir}" destdir="${build.www.dir}" style="${source.www.dir}/template.xsl">
			<param name="lang" expression="es" />
			<mapper type="glob" from="*.xml" to="*.html.es" />
			<patternset refid="build.www.xml.patternset" />
		</xslt>

		<copy todir="${build.www.dir}">
			<fileset dir="${source.www.dir}">
				<include name="robots.txt" />
				<include name="**/*.css" />
				<include name="**/*.png" />
				<include name="**/*.png.*" />
				<include name="**/*.jpg" />
				<include name="**/*.gif" />
				<include name="**/*.ico" />
				<include name="**/start*.*" />
				<include name="**/jnlp.*" />
				<include name="**/reference.php" />
				<include name="js/*" />
			</fileset>
		</copy>

		<macrodef name="thumbnails">
			<attribute name="dest" />
			<element name="filesets" />
			<sequential>
				<apply executable="convert" dest="@{dest}" failonerror="true" verbose="true">
					<arg line="-geometry 200x200" />
					<srcfile />
					<targetfile />
					<filesets />
					<mapper type="regexp" from="^(.*)\.([^.]*)" to="\1-thumb.\2" />
				</apply>
			</sequential>
		</macrodef>

		<thumbnails dest="${build.www.dir}">
			<filesets>
				<fileset dir="${source.www.dir}">
					<include name="images/screenshots/*.png" />
				</fileset>
			</filesets>
		</thumbnails>
	</target>

	<target name="build.win32" depends="build.win32.jre">
		<copy todir="build/win32">
			<fileset dir="source/org/kolaka/freecast/nsis" />
			<filterset>
				<filter token="project.version" value="${project.version}" />
			</filterset>
		</copy>
	</target>

	<target name="build.win32.jre" unless="build.win32.jre.notRequired">
		<mkdir dir="build/win32" />
		<get dest="build/win32/jre-setup.exe" src="${export.win32.jresetup.url}" usetimestamp="true" />
	</target>

	<target name="test" depends="build.test" description="Run the unit tests">
		<property name="build.test.results.dir" value="build/test/results" />
		<mkdir dir="${build.test.results.dir}" />
		<property name="test.haltonfailure" value="true" />
		<junit printsummary="yes" haltonfailure="${test.haltonfailure}" includeantruntime="yes" fork="yes">
			<formatter type="plain" />
			<batchtest todir="${build.test.results.dir}">
				<fileset dir="source">
					<include name="**/test/*Test.java" />
					<include name="**/test/*TestSuite.java" />
					<exclude name="**/test/*BaseTest.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement path="build/core/classes" />
				<pathelement path="build/test/classes" />
				<path refid="path.test" />
			</classpath>
			<sysproperty key="java.library.path" path="${track.tritonus.dir}" />
		</junit>
	</target>

	<target name="dist" depends="build, dist.jar, dist.bin, dist.etc, dist.lib" description="Create the binaries distribution" />

	<target name="dist.jar">
		<mkdir dir="dist/lib" />
		<jar jarfile="dist/lib/freecast.jar">
			<fileset dir="${build.core.classes.dir}" />
		</jar>
	</target>

	<target name="dist.bin">
		<copy tofile="dist/bin/freecast" file="source/org/kolaka/freecast/freecast-template.sh">
			<filterset>
				<filter token="app.name" value="freecast" />
				<filter token="app.mainclass" value="org.kolaka.freecast.node.cli.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast-tracker" file="source/org/kolaka/freecast/freecast-template.sh">
			<filterset>
				<filter token="app.name" value="freecast-tracker" />
				<filter token="app.mainclass" value="org.kolaka.freecast.tracker.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast-swing" file="source/org/kolaka/freecast/freecast-template.sh">
			<filterset>
				<filter token="app.name" value="freecast-swing" />
				<filter token="app.mainclass" value="org.kolaka.freecast.node.swing.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast-keygenerator" file="source/org/kolaka/freecast/freecast-template.sh">
			<filterset>
				<filter token="app.name" value="freecast-keygenerator" />
				<filter token="app.mainclass" value="org.kolaka.freecast.packet.signer.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast-manager" file="source/org/kolaka/freecast/freecast-template.sh">
			<filterset>
				<filter token="app.name" value="freecast-manager" />
				<filter token="app.mainclass" value="org.kolaka.freecast.manager.gui.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast.bat" file="source/org/kolaka/freecast/freecast-template.bat">
			<filterset>
				<filter token="app.name" value="freecast" />
				<filter token="app.mainclass" value="org.kolaka.freecast.node.cli.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast-tracker.bat" file="source/org/kolaka/freecast/freecast-template.bat">
			<filterset>
				<filter token="app.name" value="freecast-tracker" />
				<filter token="app.mainclass" value="org.kolaka.freecast.tracker.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast-keygenerator.bat" file="source/org/kolaka/freecast/freecast-template.bat">
			<filterset>
				<filter token="app.name" value="freecast-keygenerator" />
				<filter token="app.mainclass" value="org.kolaka.freecast.packet.signer.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast-swing.bat" file="source/org/kolaka/freecast/freecast-template.bat">
			<filterset>
				<filter token="app.name" value="freecast-swing" />
				<filter token="app.mainclass" value="org.kolaka.freecast.node.swing.Main" />
			</filterset>
		</copy>

		<copy tofile="dist/bin/freecast-manager.bat" file="source/org/kolaka/freecast/freecast-template.bat">
			<filterset>
				<filter token="app.name" value="freecast-manager" />
				<filter token="app.mainclass" value="org.kolaka.freecast.manager.gui.Main" />
			</filterset>
		</copy>
		
		<copy tofile="dist/bin/freecast-setup" file="source/org/kolaka/freecast/freecast-template.sh">
			<filterset>
				<filter token="app.name" value="freecast" />
				<filter token="app.mainclass" value="org.kolaka.freecast.setup.Main" />
			</filterset>
		</copy>
		
		<copy tofile="dist/bin/freecast-setup.bat" file="source/org/kolaka/freecast/freecast-template.bat">
			<filterset>
				<filter token="app.name" value="freecast" />
				<filter token="app.mainclass" value="org.kolaka.freecast.setup.Main" />
			</filterset>
		</copy>

		<copy todir="dist/bin" file="source/org/kolaka/freecast/classpath.bat" />

		<chmod perm="+x">
			<fileset dir="dist/bin">
				<include name="freecast*" />
				<exclude name="*.bat" />
			</fileset>
		</chmod>
	</target>

	<target name="dist.etc" depends="build.etc">
	  <mkdir dir="dist/etc"/>
	  <xmltidy dest="dist/etc">
		<filesets>
		  <fileset dir="build/etc/complete" />
		</filesets>
	  </xmltidy>
	</target>

	<target name="dist.docs" depends="build.docs, build.changelog">
		<copy todir="dist/docs" includeEmptyDirs="false">
			<fileset dir="build/docs">
				<exclude name="**/.touch" />
				<exclude name="userguide/**/*.xml" />
				<exclude name="userguide/**/*.xsl" />
				<exclude name="userguide/*.fo" />
				<exclude name="userguide/*.html" />
			</fileset>
			<fileset dir="build/changelog" />
		</copy>
		<tidy dest="dist/docs" failonerror="false">
			<filesets>
				<fileset dir="build/docs">
					<include name="userguide/*.html" />
				</fileset>
			</filesets>
		</tidy>

		<!-- TODO find a better way -->
		<mkdir dir="dist/docs/examples/audio"/>
		<mkdir dir="dist/docs/examples/video"/>
		<mkdir dir="dist/docs/examples/tracker"/>

		<xmltidy dest="dist/docs/examples">
		  <filesets>
			<fileset dir="source/org/kolaka/freecast/config/samples">
				<include name="**/*.xml" />
			</fileset>
		  </filesets>
		</xmltidy>

		<mkdir dir="dist/docs/examples/jws"/>
		<xmltidy dest="dist/docs/examples/jws">
		  <filesets>
			<fileset dir="source/org/kolaka/freecast/node/swing">
				<include name="config.xml" />
				<include name="descriptor.xml" />
			</fileset>
		  </filesets>
		</xmltidy>
	</target>

	<target name="dist.lib">
		<copy todir="dist/lib">
			<fileset dir="lib/core"/>
			<fileset dir="lib/runtime">
				 <include name="*.jar"/>
				 <exclude name="jdic-stub*"/>
				 <exclude name="jdic-native*"/>
			</fileset>
		</copy>
		<copy todir="dist/lib/linux">
			<fileset dir="lib/runtime" includes="jdic-stub-linux.jar"/>
		</copy>
		<copy todir="dist/lib/windows">
			<fileset dir="lib/runtime" includes="jdic-stub-windows.jar"/>
		</copy>
		<copy todir="dist/lib/sunos">
			<fileset dir="lib/runtime" includes="jdic-stub-sunos.jar"/>
		</copy>
			
		<patternset id="patternset.nometainf">
			<exclude name="META-INF/**"/>
		</patternset>

		<unjar dest="dist/lib/linux/x86">
			<fileset dir="lib/runtime" includes="*-native-linux-x86.jar"/>
			<patternset refid="patternset.nometainf"/>
		</unjar>
		<unjar dest="dist/lib/windows/x86">
			<fileset dir="lib/runtime" includes="*-native-windows-x86.jar"/>
			<patternset refid="patternset.nometainf"/>
		</unjar>
		<unjar dest="dist/lib/sunos/x86">
			<fileset dir="lib/runtime" includes="*-native-sunos-x86.jar"/>
			<patternset refid="patternset.nometainf"/>
		</unjar>
		<unjar dest="dist/lib/sunos/sparc">
			<fileset dir="lib/runtime" includes="*-native-sunos-sparc.jar"/>
			<patternset refid="patternset.nometainf"/>
		</unjar>
		
		<copy todir="dist/lib/linux/x86">
			<fileset dir="${track.tritonus.dir}">
				<include name="*.so" />
			</fileset>
		</copy>
		<copy todir="dist/lib/windows/x86" flatten="true">
			<fileset dir="${track.tritonus.dir}">
				<include name="**/*.dll" />
			</fileset>
		</copy>
	</target>

	<target name="dist.jws.check">
		<available file="${dist.jws.keystore}" property="dist.jws.possible" />
	</target>

	<target name="dist.jws.libfreecast" depends="prepare.version, build.etc, dist.jar, dist.lib, dist.jws.check" if="dist.jws.possible">
		<property name="dist.jws.libfreecast.dir" value="dist/jws/libfreecast" />
		<property name="dist.jws.codebase" value="http://download.freecast.org/jws/libfreecast/"/>
		
		<copy tofile="${dist.jws.libfreecast.dir}/libfreecast-${project.version}.jnlp" file="source/org/kolaka/freecast/node/swing/libfreecast.jnlp">
			<filterset>
				<filter token="project.version" value="${project.version}" />
				<filter token="codebase" value="${dist.jws.codebase}" />
			</filterset>
		</copy>
		<copy tofile="${dist.jws.libfreecast.dir}/freecast-manager.jnlp" file="source/org/kolaka/freecast/manager/gui/freecast-manager.jnlp">
			<filterset>
				<filter token="project.version" value="${project.version}" />
				<filter token="codebase" value="${dist.jws.codebase}" />
			</filterset>
		</copy>

		<mkdir dir="${dist.jws.libfreecast.dir}/lib" />
		<jar jarfile="${dist.jws.libfreecast.dir}/lib/freecast-bootstrap.jar">
			<fileset dir="${build.core.classes.dir}">
				<include name="org/kolaka/freecast/node/swing/Bootstrap.class" />
			</fileset>
		</jar>

		<jar jarfile="${dist.jws.libfreecast.dir}/lib/freecast-etc.jar">
			<fileset dir="build/etc/console-only" />
		</jar>

		<copy todir="${dist.jws.libfreecast.dir}/lib" flatten="true">
			<fileset dir="dist/lib">
				<include name="*.jar" />
				<include name="jws/freecast-bootstrap.jar" />

				<!-- TODO replace with a dedicated library -->
				<exclude name="freecast*" />
			</fileset>
		</copy>
		<copy todir="${dist.jws.libfreecast.dir}/lib">
			<fileset dir="dist/lib">
				<include name="linux/*.jar" />
				<include name="windows/*.jar" />
				<include name="sunos/*.jar" />
			</fileset>
		</copy>
		<mkdir dir="${dist.jws.libfreecast.dir}/lib/linux" />
		<jar jarfile="${dist.jws.libfreecast.dir}/lib/linux/native_x86.jar">
			<fileset dir="dist/lib/linux/x86" />
		</jar>
		<mkdir dir="${dist.jws.libfreecast.dir}/lib/windows" />
		<jar jarfile="${dist.jws.libfreecast.dir}/lib/windows/native_x86.jar">
			<fileset dir="dist/lib/windows/x86" />
		</jar>
		<mkdir dir="${dist.jws.libfreecast.dir}/lib/sunos" />
		<jar jarfile="${dist.jws.libfreecast.dir}/lib/sunos/native_sparc.jar">
			<fileset dir="dist/lib/sunos/sparc" />
		</jar>
		<jar jarfile="${dist.jws.libfreecast.dir}/lib/sunos/native_x86.jar">
			<fileset dir="dist/lib/sunos/x86" />
		</jar>
		<copy tofile="${dist.jws.libfreecast.dir}/lib/freecast-${project.version}.jar" file="dist/lib/freecast.jar" />

		<signjar keystore="${dist.jws.keystore}" alias="kolaka" storepass="kolaka">
			<fileset dir="${dist.jws.libfreecast.dir}/lib" includes="**/*.jar">
				<depend targetdir="${dist.jws.libfreecast.dir}/lib">
					<mapper type="merge" to=".signjar" />
				</depend>
			</fileset>
		</signjar>
		<touch file="${dist.jws.libfreecast.dir}/lib/.signjar" />
	</target>

	<target name="dist.jws" depends="dist.jws.libfreecast" />

	<target name="dist.debian" depends="dist.jar, dist.lib, dist.bin, dist.docs, dist.etc">
		<copy todir="${dist.debian.dir}/usr/share/freecast">
			<fileset dir="dist">
				<include name="lib/*.jar" />
				<include name="lib/linux/**" />
				<!-- log4j is provided by package dependencies -->
				<exclude name="lib/log4j*.jar" />
				<exclude name="lib/commons-cli*.jar" />
				<exclude name="lib/commons-collections*.jar" />
				<exclude name="lib/commons-logging*.jar" />
				<exclude name="lib/commons-digester*.jar" />
				<exclude name="lib/commons-beanutils*.jar" />

				<include name="bin/*" />
				<exclude name="bin/*.bat" />
			</fileset>
		</copy>

		<copy todir="${dist.debian.dir}/etc/freecast" includeemptydirs="false">
			<fileset dir="dist/etc" />
		</copy>
		<chmod perm="+x">
			<fileset dir="${dist.debian.dir}/usr/share/freecast/bin">
				<include name="freecast*" />
			</fileset>
		</chmod>
	</target>

	<target name="dist.win32" depends="dist.jar, dist.lib, dist.bin, dist.docs, dist.etc, build.win32">
		<copy todir="${dist.win32.dir}" includeemptydirs="false">
			<fileset dir="dist">
				<include name="lib/*.jar" />
				<include name="lib/windows/**" />
				<include name="bin/*.bat" />
				<include name="etc/**" />
				<include name="docs/*" />
				<include name="docs/userguide/**" />
				<include name="docs/examples/**" />
			</fileset>
		</copy>
		<copy todir="${dist.win32.dir}/etc">
		  <fileset dir="dist/docs/examples/audio"/>
		</copy>
		<copy file="LICENSE" tofile="${dist.win32.dir}/LICENSE.txt" />
        <fixcrlf srcdir="${dist.win32.dir}" eol="dos">
		  <include name="**/*.xml"/>
		  <include name="**/*.bat"/>
		  <include name="**/*.txt"/>
		  <include name="**/*.html"/>
		</fixcrlf>
	</target>

	<macrodef name="tidy">
		<attribute name="dest" />
		<attribute name="failonerror" default="true" />
		<attribute name="encoding" default="utf8" />
		<element name="filesets" optional="false" />
		<sequential>
			<apply executable="tidy" dest="@{dest}" failonerror="@{failonerror}" verbose="true">
				<arg line="-quiet -@{encoding} -wrap 100 -indent" />
				<arg value="-o" />
				<targetfile />
				<srcfile />
				<filesets />
				<mapper type="identity" />
			</apply>
		</sequential>
	</macrodef>

	<macrodef name="xmltidy">
		<attribute name="dest" />
		<attribute name="failonerror" default="true" />
		<element name="filesets" optional="false" />
		<sequential>
			<apply executable="tidy" dest="@{dest}" failonerror="@{failonerror}" verbose="true">
				<arg line="-xml -quiet -utf8 -wrap 100 -indent" />
				<arg value="-o" />
				<targetfile />
				<srcfile />
				<filesets />
				<mapper type="identity" />
			</apply>
		</sequential>
	</macrodef>

	<target name="dist.www" depends="build.www, build.docs.userguide">
		<mkdir dir="dist/www" />
		<tidy dest="dist/www">
			<filesets>
				<fileset dir="build/www">
					<include name="*.html.*" />
					<exclude name="start.html.*" />
					<exclude name="screencast-*.html.*" />
				</fileset>
			</filesets>
		</tidy>

		<!-- screencast pages used an embed tag -->
		<tidy dest="dist/www" failonerror="false">
			<filesets>
				<fileset dir="build/www">
					<include name="screencast-*.html.*" />
				</fileset>
			</filesets>
		</tidy>

		<copy todir="dist/www" encoding="UTF-8">
			<fileset dir="build/www">
				<exclude name="*.html.*" />
			</fileset>
		</copy>

		<mkdir dir="dist/www/userguide" />
		<tidy dest="dist/www/userguide" failonerror="false">
			<filesets>
				<fileset dir="build/docs/userguide">
					<include name="*.html" />
				</fileset>
			</filesets>
		</tidy>
		<copy todir="dist/www/userguide">
			<fileset dir="build/docs/userguide">
				<include name="**/*.png" />
				<include name="**/*.css" />
				<include name="*.pdf" />
			</fileset>
		</copy>
	</target>

	<target name="export.tar" depends="prepare.version, build.changelog, dist, dist.docs" description="Packages binaries and sources distributions">
		<mkdir dir="export" />

		<tar tarfile="export/${project.fullname}.tar.bz" compression="bzip2">
			<!-- permissions are not managed by the tar target -->
			<tarfileset dir="dist" prefix="${project.fullname}" mode="755">
				<include name="bin/freecast*" />
				<exclude name="bin/*.bat" />
			</tarfileset>
			<tarfileset dir="dist" prefix="${project.fullname}">
				<include name="bin/*.bat" />
			</tarfileset>
			<tarfileset dir="dist" prefix="${project.fullname}">
				<exclude name="bin/**" />
				<exclude name="jws/**" />
				<exclude name="www/**" />
				<exclude name="log/**" />
				<exclude name="docs/**" />
				<exclude name="install/**" />
			</tarfileset>
			<tarfileset dir="dist/docs" prefix="${project.fullname}/docs">
				<include name="userguide/**" />
				<include name="examples/**" />
			</tarfileset>
		</tar>
		<tar tarfile="export/${project.fullname}-src.tar.bz" compression="bzip2">
			<tarfileset dir="source" prefix="${project.fullname}/source">
				<exclude name="**/.arch-ids/**" />
			</tarfileset>
			<tarfileset dir="dist/docs" prefix="${project.fullname}/docs">
				<exclude name="**/.touch" />
			</tarfileset>
			<tarfileset dir="${basedir}" prefix="${project.fullname}">
				<include name="build.*" />
				<include name="track.*" />
				<include name="CONTRIBUTORS" />
				<include name="LICENSE" />
			</tarfileset>
		</tar>
	</target>

	<target name="export.win32" depends="dist.win32">
		<pathconvert targetos="windows" property="export.win32.build.dir">
			<path>
				<pathelement location="${basedir}/build/win32" />
			</path>
		</pathconvert>
		<exec executable="makensis" failonerror="true">
			<arg value="-V4" />
			<arg value="-NOCD" />
			<arg value="-DBuildDir=build\win32" />
			<arg value="-DDistDir=dist\win32" />
			<arg value="-DExportFile=export\${project.fullname}.exe" />
			<arg file="build/win32/freecast.nsi" />
		</exec>
	</target>

	<target name="export.debian" depends="export.debian.changelog">
		<exec executable="fakeroot" failonerror="true">
			<arg line="./debian/rules binary"/>
		</exec>
		<exec executable="sed" outputproperty="export.debian.changelog.version" failonerror="true">
			<arg line="-n '1 s/freecast (\(.*\)).*/\1/p'"/>
			<arg file="debian/changelog"/>
		</exec>
		<echo message="${export.debian.changelog.version}"/>
		<move file="../freecast_${export.debian.changelog.version}_all.deb" todir="export"/>
	</target>

	<target name="export.debian.clean">
		<exec executable="fakeroot" failonerror="true">
			<arg line="./debian/rules clean"/>
		</exec>
	</target>
	
	<target name="export.debian.changelog.check" depends="prepare.version">
		<exec executable="sed" outputproperty="export.debian.changelog.currentversion" failonerror="true">
			<arg line="-n '1 s/freecast (\(.*\)).*/\1/p'"/>
			<arg file="debian/changelog"/>
		</exec>
		
		<condition property="export.debian.changelog.notRequired">
			<contains string="${export.debian.changelog.currentversion}" substring="${project.version}"/>
		</condition>
	</target>

	<target name="export.debian.changelog" unless="export.debian.changelog.notRequired" depends="export.debian.changelog.check">
		<tempfile property="export.debian.changelog.append"/>
		<tstamp>
	      <format property="export.debian.changelog.date" pattern="EEE, dd MMM yyyy hh:mm:ss Z"/>
		</tstamp>
		<copy tofile="${export.debian.changelog.append}" file="debian/changelog.template">
			<filterset>
				<filter token="project.version" value="${project.version}" />
				<filter token="date" value="${export.debian.changelog.date}" />
			</filterset>
		</copy>
		
		<exec executable="cat" failonerror="true">
			<arg value="${export.debian.changelog.append}"/>
		</exec>

		<tempfile property="export.debian.changelog.output"/>
		<concat destfile="${export.debian.changelog.output}">
			<fileset file="${export.debian.changelog.append}"/>
			<filelist dir="${basedir}" files="debian/changelog"/>
		</concat>
		
		<copy tofile="debian/changelog" file="${export.debian.changelog.output}"/>
		
		<delete file="${export.debian.changelog.output}"/>
		<delete file="${export.debian.changelog.append}"/>
	</target>
	
	<target name="export" depends="export.tar, export.debian, export.win32">
		<copy tofile="export/README.html" file="build/changelog/changelog.html" />
		<copy todir="export">
			<fileset dir="build/changelog">
				<include name="*.css" />
			</fileset>
		</copy>
	</target>

	<target name="ccontrol.loop" depends="clean, dist, export" />

	<target name="install.export" depends="export">
		<property name="install.export.target" value="${user.name}@download.freecast.org:/var/www/kolaka.org/freecast/export" />
		<exec executable="rsync" failonerror="true">
			<arg value="-avc" />
			<arg line="--exclude '*.deb'"/>
			<arg value="export/" />
			<arg value="${install.export.target}" />
		</exec>
	</target>

	<target name="install.docs" depends="dist.docs">
		<tempfile property="install.docs.tempfile" prefix="freecast-docs-" suffix=".tar.gz" />
		<basename property="install.docs.tempfilename" file="${install.docs.tempfile}" />

		<tar destfile="${install.docs.tempfile}" basedir="dist/docs" compression="gzip" />

		<exec executable="rsync" failonerror="true">
			<arg value="-av" />
			<arg value="${install.docs.tempfile}" />
			<arg value="${user.name}@ssh.tryphon.org:/tmp/" />
		</exec>
		<exec executable="ssh" failonerror="true">
			<arg value="${user.name}@ssh.tryphon.org" />
			<arg value="tar -xzf /tmp/${install.docs.tempfilename} -C /var/www/kolaka.org/freecast/docs ; rm /tmp/${install.docs.tempfilename}" />
		</exec>

		<delete file="${install.docs.tempfile}" />
	</target>

	<target name="install.jws" depends="dist.jws">
		<!--
			install files needed for the JavaWebStart deployment, can look a bit complicated,
			but the copy operation must preserve the files already published and the jar
			signatures modify the jar files (and the last modifications). So retrieve published
			files, add only missing files, and sync back the remote directory
        -->
		<mkdir dir="dist/install/jws" />
		<property name="install.jws.target" value="${user.name}@ssh.tryphon.org:/var/www/kolaka.org/freecast/jws" />

		<exec executable="rsync" failonerror="true">
			<arg value="-av" />
			<arg value="${install.jws.target}/libfreecast" />
			<arg value="dist/install/jws" />
		</exec>

		<copy todir="dist/install/jws" verbose="true">
			<fileset dir="dist/jws">
				<include name="**/*.jar" />
				<present present="srconly" targetdir="dist/install/jws" />
				<exclude name="**/.signjar" />
			</fileset>
			<fileset dir="dist/jws">
				<include name="**/freecast*.jar" />
			</fileset>
			<fileset dir="dist/jws">
				<exclude name="**/*.jar" />
				<exclude name="**/.signjar" />
			</fileset>
		</copy>

		<exec executable="rsync" failonerror="true">
			<arg value="-av" />
			<arg value="dist/install/jws/" />
			<arg value="${user.name}@ssh.tryphon.org:/var/www/kolaka.org/freecast/jws" />
		</exec>
	</target>

	<target name="install.www" depends="dist.www">
		<property name="install.www.target" value="${user.name}@ssh.tryphon.org:/var/www/freecast.org/www/" />
		<exec executable="rsync" failonerror="true">
			<arg value="-av" />
			<arg value="dist/www/" />
			<arg value="${install.www.target}" />
		</exec>
	</target>
	
</project>
