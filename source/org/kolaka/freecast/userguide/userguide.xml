<?xml version="1.0"?>

<!DOCTYPE book PUBLIC
"-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY freecast "<application>FreeCast</application>">
]>

<book>
<bookinfo>
	<title>
		FreeCast User's Guide
	</title> 
  <pubdate>@pubdate@</pubdate>
  <copyright><year>2005-2006</year><holder>Alban Peignier</holder></copyright>
</bookinfo>
<preface id="foreword">
	<title>Foreword</title>
	<para>
		This document is mainly dedicated to the broadcasters who want to deploy their own FreeCast network. 
		It should be interesting for everyone who want to know more about FreeCast. 
	</para>
	<para>
		This document is available on the FreeCast website at <ulink url="http://www.freecast.org/userguide"/>.
		A <ulink url="http://www.freecast.org/userguide/userguide.pdf">PDF version</ulink> is available too.
		This release is always associated to the current FreeCast release.
	</para>
	<para>
		Your comments are welcome, please contact the FreeCast support team: <ulink url="http://www.freecast.org/support"/>.
	</para>
	<para>
		The latest release of this document is available during its writing 
		into the development project documentation at <ulink url="http://www.kolaka.org/freecast/docs/userguide"/>.
	</para>
</preface>
<chapter id="introduction">
	<title>What's FreeCast</title>
	<mediaobject>
		<imageobject>
			<imagedata fileref="images/logo.png" format="PNG"/>
		</imageobject>
		<textobject>
			<phrase>FreeCast</phrase>
		</textobject>
	</mediaobject>
	<para>
		FreeCast streams content by using a peer-to-peer network model.
		It allows to broadcast a stream to a large number of listeners from a simple DSL connection.
		FreeCast offers the possibility to broadcast over the Internet without a strict limit of listener count. 
		You can share with the largest number without the economic cost of a large bandwidth.
	</para>
	<para>
		Visit the FreeCast website: <ulink url="http://www.freecast.org/"/>
	</para>
	<sect1 id="introduction-architecture">
		<title>Architecture overview</title>
		<para>
			To understand how to use and deploy a FreeCast network, you need to understand a few key concepts.
			A FreeCast network is able to broadcast a stream, which can contain audio and/or video contents.
			The stream won't be modified by the FreeCast broadcasting. The way and tools used to create and play 
			the stream are near the same than in a classic broadcast.
		</para>
		<sect2>
			<title>Classic broadcast</title>
			<para>
				Before explaining the the concept of peer-to-peer broadcast, let's look at what is a classic broadcast. 
				In a classic broadcast, there are two roles: server and client.
				The server has the information to be streamed available and sends them directly to each client.
				That makes things simple for the client, which easily connects and retrieves information with the URL of the server. When the 
				server bandwidth is wide enough, this classic broadcast performs well.
				The quality of service depends mostly of the Internet access quality of the client.
			</para>
			<para>
				Things become more difficult for the server
				as the client count grows. The server must send the same information to each client, 
				and all these data must be sent with the single Internet connection of the server. 
				As such, the needed infrastructure becomes quickly expansive. As an example, if you want to accept
				up to 50 listeners with a musical stream (typically encoded at 128kbits), you
				need an Internet connection with an upload bandwidth larger than 6.25 Mbits. 
				As a comparison, a classic DSL access provides an upload bandwidth of 0.5Mbits ...
			</para>
		</sect2>
		<sect2>
			<title>Peer-to-peer broadcast</title>
			<para>
				The peer-to-peer broadcast is based on a simple question: 
				<emphasis>why clients which are retrieving (and listening to) the stream 
				should stay passive ?</emphasis>
				Nowadays, most of the stream listeners have a DSL access.
				Instead of concentrating all clients on the server, it would be better if the clients which 
				are listening to the stream relay it to a few other clients. This is what is achieved with a peer-to-peer broadcast.
			</para>
			<para>
				This collaborative approach has evident benefits. 
				From the broadcaster side, the server bandwidth is less loaded and
				the client count is not limited. For instance, a broadcast can be 
				started from a simple DSL access. The streaming infrastructure cost 
				can be reduced in a significant manner. From the client side, benefits may
				be indirect but not null, because if the peer-to-peer model makes
				things easier for the broadcaster, it allows the clients to find
				more streams, more choices, less advertising. A collaborative
				approach can be initiated between broadcaster and clients: clients 
				can support the broadcaster by relaying the stream between their 
				listenings.
			</para>
		</sect2>
		<sect2>
			<title>Key concepts</title>
			<para>A FreeCast network is composed of a 
			<firstterm>tracker</firstterm>, a <firstterm>root node</firstterm> and <firstterm>nodes</firstterm>.</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/architecture-network.png" format="PNG"/>
				</imageobject>
				<textobject>
					<phrase>Architecture of a FreeCast network</phrase>
				</textobject>
			</mediaobject>
			<sect3>
				<title>Node</title>
				<indexterm><primary>node</primary></indexterm>
				<para>
					In a FreeCast network, the stream transits via one or more nodes. 
					Each node can receive, use (play) and send stream information (packets). 
					All the nodes of a given FreeCast network register themselves to the 
					same tracker.
				</para>
			</sect3>
			<sect3>
				<title>Root Node</title>
				<indexterm><primary>node</primary><secondary>root</secondary></indexterm>
				<para>
					The root node creates the FreeCast stream 
					(a sequence of packets) from a classic Ogg stream. The following
					nodes receive directly or indirectly the packets created by the
					root node.
				</para>
			</sect3>
			<sect3>
				<title>Tracker</title>
				<indexterm><primary>tracker</primary></indexterm>
				<para>
					The tracker has an overview of the network. 
					A FreeCast node can only participate to a FreeCast network once it is 
					registered to the tracker of this network. All the nodes of the network 
					send information to the tracker periodically. 
					The nodes use the tracker to obtain references to other nodes.
				</para>
			</sect3>
		</sect2>
	</sect1>
	<!-- TODO
	<sect1>
		<title>Features</title>
	</sect1>-->
</chapter>

<chapter id="getting-started">
	<title>Getting started</title>

	<sect1 id="getting-started-intro">
	  <title>FreeCast Manager introduction</title>

	  <screenshot>
		<screeninfo>FreeCast Manager - Main dialog</screeninfo>
		<mediaobject>
		  <imageobject>
			<imagedata fileref="images/manager-screenshot-linux.png" format="PNG"/>
		  </imageobject>
		  <textobject>
			<phrase>FreeCast Manager</phrase>
		  </textobject>
		</mediaobject>
	  </screenshot>

	  <para>
		<application>FreeCast Manager</application> is a graphical application
		which allows to start a FreeCast network. It provides:
		<itemizedlist>
		  <listitem><para>a FreeCast tracker</para></listitem>
		  <listitem><para>a FreeCast root node</para></listitem>
		  <listitem><para>an embedded HTTP server</para></listitem>
		</itemizedlist>
		All these components are configured automatically when the FreeCast Manager starts.
	  </para>
	  <para>
		FreeCast Manager can be started via JavaWebStart. 
		In this case, it will be installed and upgraded automatically via Internet.
	  </para>
	</sect1>
	<sect1 id="first-network">
	  <title>Your first FreeCast network</title>
		<procedure>
			<step>
			  <para>You need to have a Java Runtime Environment 1.4 or 1.5 installed, see <ulink url="http://www.java.com"/></para>
			</step>
			<step>
			  <para>
				<ulink url="http://download.freecast.org/jws/libfreecast/freecast-manager.jnlp">Start</ulink> 
				<application>FreeCast Manager</application> via JavaWebStart
			  </para>
			</step>
			<step>
			  <para>
				When loaded, the <application>FreeCast Manager</application> starts, 
				configures the FreeCast network and displays the GUI.
			  </para>
			</step>
		</procedure>

		
		<sect2>
		  <title>General GUI layout</title>

		  <screenshot>
			<screeninfo>FreeCast Manager - Main dialog</screeninfo>
			<mediaobject>
			  <imageobject>
				<imagedata fileref="images/manager-screenshot-linux.png" format="PNG"/>
			  </imageobject>
			  <textobject>
				<phrase>FreeCast Manager</phrase>
			  </textobject>
			</mediaobject>
		  </screenshot>

		  <para>
			The <application>FreeCast Manager</application> GUI regroups the activity indicators
			of the embedded tracker and root node. 
		  </para>
		  <sect3>
			<title>Tracker</title>
			<para>
			  The node count is displayed in realtime. At startup, a single node 
			  is counted: it's the embedded root node.
			</para>
		  </sect3>
		  <sect3>
			<title>Root Node</title>
			<para>
			  For the root node, the connected node count is displayed. The first listener nodes
			  will be displayed in this count, the following nodes will be connected to these 
			  first nodes.
			</para>
		  </sect3>
		</sect2>

		<sect2>
		  <title>Actions</title>
		  <screenshot>
			<screeninfo>FreeCast Manager - Actions menu</screeninfo>
			<mediaobject>
			  <imageobject>
				<imagedata fileref="images/manager-menu-screenshot-linux.png" format="PNG"/>
			  </imageobject>
			  <textobject>
				<phrase>FreeCast Manager Actions menu</phrase>
			  </textobject>
			</mediaobject>
		  </screenshot>
		  <para>
			The action menu can be displayed by right-clicking on the GUI.
			This menu allows the following actions:
		  </para>
		  <sect3>
			<title>Browse network homepage</title>
			<para>
			  Starts your browser to visit the web homepage of the FreeCast network.
			  This web homepage is hosted by the embedded web server provided by
			  the <application>FreeCast Manager</application>. This page will be
			  used by listeners to easily start their nodes.
			</para>
			<para>
			  Don't publish the URL displayed by your browser, 
			  use the <guimenuitem>Email network homepage</guimenuitem> action instead.
			</para>
		  </sect3>
		  <sect3>
			<title>Email network homepage</title>
			<para>
			  Creates a base email to inform your first listeners. The created email
			  contains the URL to be used to visit the homepage of your FreeCast network.
			</para>
			<programlisting>Subject: My FreeCast Network

Visit the homepage of my FreeCast network: http://84.67.103.24:8080/</programlisting>
			<para>
			  Complete and send this email to your first listeners. 
			  They just have to visit the given URL and click on the start button.
			</para>
			<note>
			  <title>Different URLs and some don't work</title>
			  <para>
				According to your network configuration, the FreeCast Manager can use several URLs 
				to designate the homepage of your FreeCast network. The main cause is that
				you can have to use a different URL than your listeners to access to your own computer.
				The FreeCast manager respects this constraint. Take care to use the URL 
				specified in the email to invite your listeners.
			  </para>
			</note>
		  </sect3>
		  <sect3>
			<title>Configure FreeCast</title>
			<para>
			  Select this menu to start the Setup Dialog, see <xref linkend="getting-started-setupdialog"/>.
			</para>
		  </sect3>
		</sect2>
	</sect1>
	<sect1 id="getting-started-setupdialog">
	  <title>Setup Dialog</title>

	  <para>
		The Setup Dialog allows to configure the FreeCast network supported by FreeCast Manager.
	  </para>

	  <screenshot>
		<screeninfo>FreeCast Manager - Setup dialog</screeninfo>
		<mediaobject>
		  <imageobject>
			<imagedata fileref="images/manager-setup-screenshot-linux.png" format="PNG"/>
		  </imageobject>
		  <textobject>
			<phrase>FreeCast Manager Setup</phrase>
		  </textobject>
		</mediaobject>
	  </screenshot>


	  <sect2>
		<title>Receiver configuration</title>
		<para>You can select the content you want broadcast.</para>

		<sect3>
		  <title>Default test stream</title>
		  <para>Select this content to perform your first tests.</para>
		</sect3>

		<sect3>
		  <title>My own playlist</title>
		  <para>
			Select a M3U playlist with the ogg, wav or mp3 files to be broadcast.
		  </para>
		</sect3>

		<sect3>
		  <title>Retrieve the Ogg stream</title>
		  <para>
			Specify the URL where the FreeCast root node can retrieve the Ogg stream.
		  </para>
		</sect3>

		<sect3>
		  <title>Receive the Ogg stream</title>
		  <para>
			Specify the port where the FreeCast root node will receive the Ogg stream sent 
			by a third application.
		  </para>
		</sect3>
	  </sect2>
	  <sect2>
		<title>Default configuration</title>
		<para>
		  The <application>FreeCast Manager</application> will configure for you:
		  <itemizedlist>
			<listitem>
			  <para>a tracker on the port 1665</para>
			</listitem>
			<listitem>
			  <para>a HTTP server which listens on the port 80 or on the first free ports between 8080 and 8100</para>
			</listitem>
		  </itemizedlist>
		</para>
	  </sect2>
	</sect1>

	<sect1 id="getting-started-troubleshooting">
	  <title>Troubleshooting</title>
	  <sect2>
		<title>Network configuration</title>
		<remark>
		  symptoms: listeners can access to the embedded HTTP server, but the start page fails
		</remark>
		<para>
		  As plug-and-play networks are still more a concept than a reality, you can have
		  to configurate your network (router, firewall, etc ...) in order to make the 
		  FreeCast Manager services visible to your listeners (generally on the Internet).
		  By default, you need to open and/or forward the TCP ports 80 and 1665.
		</para>
	  </sect2>
	  <sect2>
		<title>Support team</title>
		<para>
		  If you experience any problem or if you have any question about FreeCast and FreeCast Manager,
		  contact the FreeCast support team. Visit <ulink url="http://www.freecast.org/support"/>.
		</para>
	  </sect2>
	</sect1>
</chapter>

<chapter id="install">
	<title>Installation</title>
	<para>
		There are several ways to install FreeCast on a system.
	</para>
	<sect1 id="install-binary">
		<title>Binary distribution</title>
		<procedure>
			<step>
				<para>install a Java Runtime Environment 1.4 or 1.5, see <ulink url="http://www.java.com"/></para>
			</step>
			<step>
				<para>download the latest release from <ulink url="http://download.freecast.org"/></para>
			</step>
			<step>
				<para>extract the FreeCast files from the downloaded archive</para>
			</step>
		</procedure>
		<sect2>
			<title>Content</title>
			<table tocentry="1">
				<title>Binary distribution content</title>
				<tgroup cols='2'>
				<colspec colname="filename" colwidth="0*"/>
				<colspec colname="description" colwidth="1*"/>
				<thead>
					<row>
						<entry>Filename</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><filename>bin</filename></entry>
						<entry>contains Unix and Windows scripts, see <xref linkend="refentry"/></entry>
					</row>
					<row>
						<entry><filename>etc</filename></entry>
						<entry>contains configuration files, see <xref linkend="node-configuration"/></entry>
					</row>
					<row>
						<entry><filename>lib</filename></entry>
						<entry>contains all needed Java libraries files</entry>
					</row>
					<row>
						<entry><filename>docs/userguide</filename></entry>
						<entry>contains this user guide</entry>
					</row>
					<row>
						<entry><filename>docs/examples/audio</filename></entry>
						<entry>contains configuration sample files for an audio stream</entry>
					</row>
					<row>
						<entry><filename>docs/examples/video</filename></entry>
						<entry>contains configuration sample files for a video stream</entry>
					</row>
					<row>
						<entry><filename>docs/examples/tracker</filename></entry>
						<entry>contains configuration sample files for tracker</entry>
					</row>
					<row>
						<entry><filename>docs/examples/jws</filename></entry>
						<entry>
						  contains configuration sample files for a <productname>JavaWebStart</productname> deployment,
						  see <xref linkend="javawebstart"/>
						</entry>
					</row>
				</tbody>
				</tgroup>
			</table>			
		</sect2>
		<sect2>
			<title>Getting started</title>
			<para>
				Once the FreeCast binaries are installed, you can start your first FreeCast network. 
				This is a small procedure to start a FreeCast tracker, a root node and a first listener.
			</para>
			<para>
				Start a command line and go to the directory where the FreeCast binaries are installed.
			</para> 
			<sect3>
				<title>Start a FreeCast tracker</title>
				<para>The FreeCast tracker doesn't require specific configuration. Just start the <command>freecast-tracker</command>:
					<screen><![CDATA[[host:path/to/freecast] bin/freecast-tracker 
create log dir: host:path/to/freecast/log
INFO   [Main]: version @version@
INFO   [ConfigurationFactory]: Trying to load configuration defaults-tracker.xml
INFO   [Main]: start a HttpTracker on port /0.0.0.0:1665
INFO   [ConnectionAssistantServer]: start ConnectionAssistant server on /0.0.0.0:1666]]></screen>
				</para>
			</sect3>
			<sect3>
				<title>Start a FreeCast root node</title>
				<para>
					When the tracker is running, that's the moment to start the root node. 
					In this example, we will use a default playlist provided by the FreeCast website as source. 
					This stream will be transmitted by your FreeCast network.
				</para>
				<screen><![CDATA[[host:path/to/freecast] bin/freecast -config docs/examples/audio/freecast-node-root.xml
INFO   [Main]: version @version@
INFO   [ConfigurationFactory]: Trying to load configuration defaults-node.xml
INFO   [NodeConfigurator]: set the public reference to [/x.x.x.x:30932{}, /192.168.0.2:30932{}]{}
WARN   [NodeConfigurator]: the playlist receiver uses a static bandwidth controler at 70
INFO   [DefaultNodeService]: received node identifier #32BF31F4C21882D9
INFO   [ConnectionAssistantClient]: connect to ConnectionAssistant at cas.freecast.org/82.226.166.133:1666
INFO   [ConnectionAssistantServiceStub]: new session]]></screen>
				<para>
					The default node configuration uses the tracker on the same host (localhost). The command line specifies
					the use of a sample configuration file. It will use a default playlist provided by the FreeCast website.
				</para>
				<para>
					The tracker should have logged the following messages when the root node registers:
					<screen><![CDATA[INFO   [Tracker$Auditor]: new registered node [/x.x.x.x:30932{}, /192.168.0.2:30932{}]{}
INFO   [Tracker$Auditor]: 1 connected nodes]]></screen>
				</para>
			</sect3>
			<sect3>
				<title>Start a first FreeCast listener node</title>
				<para>
					A FreeCast network without a listener isn't really a network .. so let's start a first FreeCast listener node.
				</para>
				<screen><![CDATA[[host:path/to/freecast] bin/freecast-swing -config docs/examples/audio/freecast-node-listener.xml
INFO   [Main]: version @version@
INFO   [NodeConfigurator]: set the public reference to [/x.x.x.x:30680{}, /192.168.0.2:30680{}]{}
INFO   [DefaultNodeService]: received node identifier #32C5AE480DADE3F1
INFO   [ConnectionAssistantClient]: connect to ConnectionAssistant at cas.freecast.org/82.226.166.133:1666
INFO   [ConnectionAssistantServiceStub]: new session]]></screen>
				<para>
					The listener node connects to the tracker, receives the references oto other peers, then tries to connect to one of them
					(the root node in your case). When the first streamed data are received, the audio player starts to play sound.
				</para>
				<para>
					The tracker should have logged the following messages when the listener node registers:
					<screen><![CDATA[INFO   [Tracker$Auditor]: new registered node [/x.x.x.x:30932{}, /192.168.0.2:30932{}]{}
INFO   [Tracker$Auditor]: 2 connected nodes]]></screen>
				</para>
				<para>
					The root node should have logged the following message when the listener node connects to it:
					<screen><![CDATA[INFO  /192.168.0.2:30932 [PeerControler$Auditor]: accept connection with DefaultPeer[identifier=#32BF31F4C21882D9,reference=[/192.168.0.2:30932{}, /x.x.x.x:30932{}]{identifier=#32BF31F4C21882D9, order=0},order=0,latency=9223372036854775807,listeners=[]]
INFO  /192.168.0.2:30932 [PeerControler$Auditor]: 1 peers connected]]></screen>
				</para>
			</sect3>		
		</sect2>
	</sect1>
	
	<sect1 id="install-debian">
		<title>Debian package distribution</title>
		<para>
			You need to have a Java Runtime Environement 1.4 or 1.5 installed, see 
			<ulink url="http://wiki.tryphon.org/Java_under_Debian">Java under Debian</ulink>.
			Other dependencies are available via packages present into the Debian releases.
		</para>
		<para>		
			The FreeCast debian package is available on the 
			<ulink url="http://debian.tryphon.org">Tryphon Debian archiver</ulink>.
			Follow the archiver configuration instructions and install the FreeCast package:
			<screen>[host:~] sudo apt-get install freecast  
Reading Package Lists... Done
Building Dependency Tree... Done
The following extra packages will be installed:
  libcommons-cli-java libcommons-collections3-java libcommons-lang-java libcommons-logging-java
The following NEW packages will be installed:
  freecast libcommons-cli-java libcommons-collections3-java libcommons-lang-java libcommons-logging-java
0 upgraded, 5 newly installed, 0 to remove and 1 not upgraded.
Need to get 3016kB of archives.
After unpacking 3618kB of additional disk space will be used.
Do you want to continue? [Y/n]</screen>
		</para>
		<sect2>
			<title>Content</title>
			<table tocentry="1">
				<title>Debian distribution content</title>
				<tgroup cols='2'>
				<colspec colname="filename" colwidth="0*"/>
				<colspec colname="description" colwidth="1*"/>
				<thead>
					<row>
						<entry>Filename</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><filename>/etc/freecast</filename></entry>
						<entry>contains configuration files, see <xref linkend="node-configuration"/></entry>
					</row>
					<row>
						<entry><filename>/var/log/freecast</filename></entry>
						<entry>contains log files as by freecast daemons</entry>
					</row>
					<row>
						<entry><filename>/etc/init.d/freecast-tracker</filename></entry>
						<entry>the init.d script to control the FreeCast tracker daemon</entry>
					</row>
					<row>
						<entry><filename>/etc/init.d/freecast</filename></entry>
						<entry>the init.d script to control the FreeCast node</entry>
					</row>
					<row>
						<entry><filename>/etc/default/freecast-tracker</filename></entry>
						<entry>default values for the FreeCast tracker daemon</entry>
					</row>
					<row>
						<entry><filename>/etc/default/freecast</filename></entry>
						<entry>default values for the FreeCast node</entry>
					</row>
					<row>
						<entry><filename>/usr/share/doc/freecast/userguide</filename></entry>
						<entry>contains this user guide</entry>
					</row>
					<row>
						<entry><filename>/usr/share/doc/freecast/examples/audio</filename></entry>
						<entry>contains configuration sample files for an audio stream</entry>
					</row>
					<row>
						<entry><filename>/usr/share/doc/freecast/examples/video</filename></entry>
						<entry>contains configuration sample files for a video stream</entry>
					</row>
					<row>
						<entry><filename>/usr/share/doc/freecast/examples/tracker</filename></entry>
						<entry>contains configuration sample files for the tracker</entry>
					</row>
					<row>
						<entry><filename>/usr/share/doc/freecast/examples/jws</filename></entry>
						<entry>
						  contains configuration sample files for a <productname>JavaWebStart</productname> deployment,
						  see <xref linkend="javawebstart"/>
						</entry>
					</row>
				</tbody>
				</tgroup>
			</table>			
			<para>
				The FreeCast debian package respects the 
				<ulink url="http://www.debian.org/doc/debian-policy/">Debian policy</ulink>.
				So FreeCast binaries are available in <filename>/usr/bin</filename> and in the default PATH, 
				see the <xref linkend="refentry"/>.
			</para>
		</sect2>		
		<sect2>
			<title>Getting started</title>
			<para>
				If you want to deploy your own FreeCast network,
				you just need to provide a root node configuration.
			</para>
			<screen>[host:~] sudo cp /usr/share/doc/freecast/examples/audio/freecast-node-root.xml /etc/freecast/
[host:~] sudo /etc/init.d/freecast-tracker start		
[host:~] sudo /etc/init.d/freecast start</screen>
			<para>
				You can follow the FreeCast daemons activity via the log files into <filename>/var/log/freecast</filename>:
				<screen>[host:~] tail -f /var/log/freecast/freecast.log /var/log/freecast/freecast-tracker.log</screen>
			</para>
			<sect3>
				<title>Relay node</title>
				<para>
					If you just want to deploy a FreeCast relay node, you need to disable the FreeCast tracker
					daemon (see <filename>/etc/default/freecast-tracker</filename>) and to provide a node configuration
					with the tracker to be used.
				</para>
			</sect3>
		</sect2>
	</sect1>
	<!-- TODO
	<sect1 id="source-install">
		<title>Source distribution</title>
	</sect1> -->
</chapter>

<chapter id="tracker">
	<title>Tracker usage</title>
	<indexterm><primary>tracker</primary></indexterm>
	<sect1 id="tracker-description">
		<title>Description</title>
		<indexterm><primary>tracker</primary></indexterm>
		<para>
		  The main component which can be configured into the tracker 
		  is the <systemitem>connector</systemitem>
		  that dialogs with every node of the FreeCast network. A <systemitem>HTTP connector</systemitem>
		  implementation is available (the <acronym>RMI</acronym> implementation is obsolete now).
		</para>

		<para>
		  The second component is the <systemitem>connection-assistant</systemitem>, see
		  <xref linkend="tracker-cas"/>.
		</para>

		<para>
		  As soon as the FreeCast tracker is started, nodes can be started.
		</para>

		<para>
		  The information about the FreeCast network managed by the tracker are lost if the tracker reboots.
		  The FreeCast network will experience troubles in this case.
		</para>

		<sect2>
		  <title>Network accessibility</title>
		  <para>
			The tracker must be accessible for all the nodes that want to participate to 
			the FreeCast network. The connector configuration must match the network configuration
			and the constraints of the computer where the tracker is hosted. If the tracker on which the connector is
			listening requests on the listen address <systemitem class="ipaddress">0.0.0.0:1665</systemitem>
			(the default value) and if the nodes are on Internet, any firewall or router between the
			tracker host and Internet must be configured to let pass through or <emphasis>forward connections</emphasis>
			to the connector port. 
		  </para>
		  <caution>
			<title>Track unreachable</title>
			<para>
			  If the FreeCast nodes "behind" a firewall, a router or such equipment encounter connection errors,
			  you should verify the network configuration.
			</para>
		  </caution>
		</sect2>

		<sect2 id="tracker-cas">
		  <title>Connection Assistant Service</title>
		  <para>
			The connection assistant service provided by the FreeCast tracker assists
			nodes to connect between them through NATs. Every node connected to the 
			same service can request help to connect to another one.
			The connection assistant service will notify the other node in realtime that 
			a NAT traversal session is starting.
		  </para>
		  <para>
			By default the connection asistant service is started on the TCP port 1666.
			The default node configuration uses a default service
			available on freecast.org servers. To use your own service, you must make it
			reachable from Internet (may be with the required forward) and change the node
			configuration (see <xref linkend="node-configuration-cas"/>).
		  </para>
		</sect2>
	</sect1>
	<sect1 id="tracker-configuration">
		<title>Configuration</title>
		<indexterm><primary>tracker</primary></indexterm>	
		
		<sect2>
			<title>General layout</title>
			<programlisting><![CDATA[<?xml version="1.0"?>
<freecast>
  <tracker>
    Connector
    ConnectionAssistant
  </tracker>
</freecast>]]></programlisting>
		</sect2>
		
		<sect2>
			<title>Connector</title>
			<sect3>
				<title>HTTP Connector</title>
				<programlisting><![CDATA[<connector>
  <class>http</class>
  <listenaddress>
    <host>0.0.0.0</host>
    <port>1665</port>
  </listenaddress>
</connector>]]></programlisting>
				<formalpara>
					<title>listenaddress</title>
					<para>
						specifies where the <systemitem>connector</systemitem> (and so the tracker) is listening to 
						requests sent by the nodes. By default, the connector is listening on
						every available IP address (<systemitem class="ipaddress">0.0.0.0</systemitem>) 
						and the TCP port <systemitem>1665</systemitem>.
					</para>
				</formalpara>
			</sect3>
		</sect2>

		<sect2>
		  <title>ConnectionAssistant</title>
		  <programlisting><![CDATA[<connection-assistant>
  <listenaddress>
    <port>1666</port>
  </listenaddress>
</connection-assistant>]]></programlisting>
		  <formalpara>
			<title>listenaddress</title>
			<para>
			  specifies where the <systemitem>connection assistant</systemitem> is listening to 
			  requests sent by the nodes to request assistance to traverse NATs. 
			  By default, the connection assistant is listening on
			  every available IP address (<systemitem class="ipaddress">0.0.0.0</systemitem>) 
			  and the TCP port <systemitem>1666</systemitem>.
			</para>
		  </formalpara>
		</sect2>

		<sect2>
			<title>Configuration sample</title>
			<para>This is the default configuration of the FreeCast tracker.</para>

			<example>
				<title>Tracker default configuration</title>
				<programlisting><textobject><textdata  fileref="defaults-tracker.xml"/></textobject></programlisting>
			</example>
		</sect2>
	</sect1>
	<sect1 id="tracker-cli">
		<title>Command line usage</title>
		<para>
			The FreeCast tracker can be started in command line via the command <command>freecast-tracker</command> (see <xref linkend="freecast"/>).
			<screen><![CDATA[[host:path/to/freecast] bin/freecast-tracker 
create log dir: host:path/to/freecast/log
INFO   [Main]: version @version@
INFO   [ConfigurationFactory]: Trying to load configuration defaults-tracker.xml
INFO   [Main]: start a HttpTracker on port /0.0.0.0:1665
INFO   [ConnectionAssistantServer]: start ConnectionAssistant server on /0.0.0.0:1666]]></screen>
		</para>
	</sect1>
</chapter>
<chapter id="node">
	<title>Node usage</title>
	<indexterm><primary>node</primary></indexterm>
	<sect1 id="node-description">
		<title>Description</title>
		<indexterm><primary>node</primary></indexterm>
		<para>
			To use and configure the FreeCast node, you need to understand a part of the internal components.
		</para>
		<sect2>
			<title>Peer provider</title>
			<para>
				The <systemitem>peerprovider</systemitem> component manages the connection between the node and the tracker.
				It must be configured with the tracker's TCP address.
			</para>
		</sect2>
		<sect2 id="sender">
			<title>Sender</title>
			<para>
				The <systemitem>sender</systemitem> component listens to requests from other nodes (peers), manages 
				the opened connections 
				and controls the sending of data. The <systemitem>udp sender</systemitem> implementation
				uses a TCP socket by default. The <systemitem>none sender</systemitem> implementation disables
				the node relaying (.. discouraged).
			</para>
			<sect3 id="sender-udp">
				<title>UDP sender</title>
				<para>
					The <systemitem>udp sender</systemitem> implementation waits for UDP connections
					initiated by other nodes. Once a connection is opened with another node (peer), 
					the sender forwards the received streamed data to this peer.
				</para>
				<para>
				  Via the <systemitem>connection assistant</systemitem>, the <systemitem>udp sender</systemitem>
				  is reachable even behind a NAT (NAT traversal).
				</para>
			</sect3>
			<sect3 id="sender-socket">
				<title>Socket sender</title>
				<para>
					The <systemitem>socket sender</systemitem> is obsolete now. Use an <systemitem>udp sender</systemitem>.
				</para>
			</sect3>
        </sect2>
        <sect2 id="reference">
            <title>Reference</title>
            <para>
                The node reference is used to localize it over the network. The default reference
                specifies the IP address and UDP port where the node waits for connections from other nodes
                (see <xref linkend="sender-udp"/>).
            </para>
            <sect3 id="reference-stun">
                <title><systemitem>stun</systemitem> reference</title>
                <para>
				  By using <systemitem>stun</systemitem> reference, the FreeCast node 
				  determinates its public address (and natted UDP port) via a 
				  <ulink url="http://en.wikipedia.org/wiki/STUN">STUN</ulink> request.
                </para>
				<para>
				  The <systemitem>stun</systemitem> reference configuration allows to specify
				  the STUN server to be used.
				</para>
				<para>
				  Node local addresses will be determinated automatically to make the node
				  reachable in the local network(s).
				</para>
				<note>
				  <title>NAT traversal</title>
				  <para>
					A node must use a <systemitem>stun</systemitem> reference to be reachable behind a NAT 
					and make NAT tranversal possible.
				  </para>
				</note>
            </sect3>
			<sect3>
			  <title><systemitem>inet</systemitem> reference</title>
			  <para>
				The <systemitem>reference</systemitem> can be specified manually via an 
				<systemitem>inet</systemitem> reference by giving host and port.
			  </para>
			  <para>
				Take care by using an <systemitem>inet</systemitem> reference, if the specified 
				information is wrong, the node won't be reachable.
			  </para>
			</sect3>
            <sect3>
                <title><systemitem>multiple</systemitem> reference</title>
                <para>
                    You can specify several references. It allows the node to be available from several
                    IP addresses. For instance, you can specify a reference with the public IP address,
                    and another with a local network address. Your node will be available both on Internet
                    and on your local network.
                </para>
            </sect3>
            <sect3>
                <title><systemitem>auto</systemitem> reference</title>
                <para>
				  The <systemitem>auto</systemitem> reference is obsolete, use 
				  <systemitem>stun</systemitem> reference instead. See <xref linkend="reference-stun"/>.
                </para>
            </sect3>
        </sect2>
		<sect2 id="receiver">
			<title>Receiver</title>
			<para>
				The <systemitem>receiver</systemitem> component manages the stream reception. According to the
				implementation, the stream can be received from other nodes (peers) or created by the node (root node)
				from a classic Ogg stream.
			</para>
			<sect3 id="receiver-peer">
				<title>Peer receiver</title>
				<para>
					The <systemitem>peer</systemitem> receiver component receives the stream
					from other nodes (peers). It doesn't require any configuration. It will use the tracker
					to find other nodes.
				</para>
			</sect3>
			<sect3 id="receiver-shoutclient">
				<title>Shoutclient receiver</title>
				<para>
					The <systemitem>shoutclient</systemitem> receiver component opens a connection
					on a shout server (like icecast or fluemondo) to retrieve an audio or video ogg stream.
				</para>
				<para>
					The <systemitem>shoutclient</systemitem> receiver configuration defines the
					URL where the stream can be received.
				</para>
			</sect3>
			<sect3 id="receiver-shoutserver">
				<title>Shoutserver receiver</title>
				<para>
					The <systemitem>shoutserver</systemitem> receiver component acts like
					a shout server. It can receive an audio or video ogg stream sent by a tool like ices2 or oddcast.
				</para>
				<para>
					The <systemitem>shoutserver</systemitem> receiver configuration defines
					the listen address used to wait for the shout connection.
				</para>
			</sect3>
			<sect3 id="receiver-playlist">
				<title>Playlist receiver</title>
				<para>
					The <systemitem>playlist receiver</systemitem> component uses a 
					<ulink url="http://en.wikipedia.org/wiki/M3u">M3U</ulink> playlist
					which lists the ogg files to be read (a file per line).
				</para>
				<para>
					The <systemitem>playlist receiver</systemitem> configuration contains the
					URL where the playlist can be found.
				</para>
			</sect3>
			<sect3 id="receiver-playlistencoder">
				<title>Encoder-Playlist receiver</title>
				<para>
				  The <systemitem>encoder-playlist</systemitem> receiver component uses a 
				  <ulink url="http://en.wikipedia.org/wiki/M3u">M3U</ulink> playlist
				  which lists the files to be read (a file per line). 
				  By default, wav, ogg and mp3 files are supported.
				</para>
				<para>
				  The Ogg stream is created via a native library which depends of the runtime platform.
				  For the moment, the library is available for linux x86 and windows platforms.
				</para>
				<para>
				  The <systemitem>encoder-playlist</systemitem> receiver configuration contains the
				  URL where the playlist can be found and stream encoding parameters like wanted Ogg 
				  quality, channel count and sample rate.
				</para>
			</sect3>
		</sect2>
		<sect2>
			<title>Stream validation</title>
			<para>
				The <systemitem>checksummer</systemitem> and <systemitem>validator</systemitem> components are used to
				validate the relayed nodes into each listener node. The <systemitem>checksummer</systemitem> is deployed
				into the root node in order to add a verifiable information to each packet (checksum). 
				The <systemitem>validator</systemitem> is used by each node listener to verify the checksum of each packet.
				According to the chosen implementation, it allows to verify that:
				<itemizedlist>
					<listitem><para>the network transfert doesn't corrupt the packet</para></listitem>
					<listitem><para>the authentification is created by the root node</para></listitem>
				</itemizedlist>
			</para>
			<para>Every packet that is not validated by the listener node will be skipped. It won't be played and relayed.</para>
			<important>
				<title>Root and listener compatibility</title>
				<para>
					Remember that the validator configuration of the listener node must be compatible with the
					checksummer configuration of the root node. Otherwise, all packets will seem invalid to
					misconfigured listeners.
				</para>
			</important>
			
			<sect3 id="validation-digester">
				<title>Digest checksummer and validator</title>
				<para>
					Deployed into the root node, the <systemitem>digest</systemitem> <systemitem>checksummer</systemitem> adds 
					a checksum to each packet (using the SHA algorithm).
				</para>
				<para>
				 	Deployed into the listener nodes, the <systemitem>digest</systemitem> <systemitem>validator</systemitem> 
				 	verifies that the packet data still matches this checksum.
				</para>
				<para>No specific configuration is needed</para>
			</sect3>
			<sect3 id="validation-signer">
				<title>Signature checksummer and validator</title>
				<para>
					Deployed into the root node with a given private key, the <systemitem>signature</systemitem> 
					<systemitem>checksummer</systemitem> signs each packet with an encrypted checksum (using an RSA private key with the SHA 
					algorithm).
				</para>
				<para>
					Deployed into the listener nodes with the associated public key, the 
					<systemitem>signature</systemitem> <systemitem>validator</systemitem> verifies that the packet data still
					matches this digital signature.
				</para>
				<para>
					To create a key pair, use the freecast-keygenerator tool:
					<screen>[host:~] freecast-keygenerator 
Generate a RSA 1024 keypair
Write private key to freecast-private.key
Write public key to freecast-public.key
Take care to the private key file security</screen>
					Then, you can use the two created files. Take care to protect the private key file.
				</para>
			</sect3>
			<sect3>
				<title>None checksummer and validator</title>
				<para>
					These implementations allow to disable the checksum creation or validator into the nodes.
					No specific configuration is needed.
				</para>
			</sect3>
		</sect2>
		<sect2>
		  <title>Connection Assistant</title>
		  <para>
			The FreeCast nodes can connect through NATs by using the connection assistance service
			(which is started into the FreeCast tracker). 
		  </para>
		  <para>
			By default, FreeCast nodes use the connection assistance service available at cas.freecast.org 
			on port 1666. The node configuration allows to specify the wanted connection assistant.
			You can use the connection assistant service provided by your tracker. See <xref linkend="tracker-cas"/>.
		  </para>
		</sect2>
	</sect1>
	
	<sect1 id="node-configuration">
		<title>Configuration</title>
		<indexterm><primary>node</primary></indexterm>
		
		<sect2>
			<title>General layout</title>
			<programlisting><![CDATA[<?xml version="1.0"?>
<freecast>
  <node>
    PeerProvider
    Sender
    Receiver

    <players>
      Player
      ...
    </players>

    ConnectionAssistant
  </node>

  GUI Configuration
</freecast>]]></programlisting>
		</sect2>
		
		<sect2>
			<title>Peer Provider</title>
			<programlisting><![CDATA[<peerprovider>
  <trackeraddress>
  	<host>freecast.acme-radio.org</host>
    <port>1665</port>
  </trackeraddress>
</peerprovider>]]></programlisting>
			<variablelist>
			  <varlistentry>
				<term><systemitem>trackeraddress</systemitem></term>
				<listitem>
				  <para>
					the TCP address where the tracker listens to node requests. 
					This configuration must match the tracker configuration.
					See <xref linkend="target-address"/>.
				  </para>
				</listitem>
			  </varlistentry>
			</variablelist>
		</sect2>

		<sect2>
			<title>Sender</title>
			<programlisting><![CDATA[<sender>
  <class>udp</class>
  <listenaddress>
    <host>0.0.0.0</host>
    <port>30000~31000</port>
  </listenaddress>

  Reference
</sender>]]></programlisting>
			<variablelist>
			  <varlistentry>
				<term><systemitem>listenaddress</systemitem></term>
				<listitem>
				  <para>
					the UDP address where the node listens to requests of other nodes.
					See <xref linkend="listen-address"/>.
				  </para>
				</listitem>
			  </varlistentry>
			</variablelist>
			<sect3>
			  <title>Reference</title>
			  <sect4>
				<title>Stun Reference</title>
				<programlisting><![CDATA[<reference>
  <class>stun</class>
  <host>stun.xten.net</host>
  <port>3478</port>
</reference>]]></programlisting>
			  </sect4>
			  <sect4>
				<title>Inet Reference</title>
				<programlisting><![CDATA[<reference>
  <class>inet</class>
  <host>0.0.0.0</host>
  <port>1664</port>
</reference>]]></programlisting>
			  </sect4>
			  <sect4>
				<title>Multiple Reference</title>
				<programlisting><![CDATA[<reference>
  <class>multiple</class>
  InetReference
  InetReference
  ...
</reference>]]></programlisting>
			  </sect4>
			</sect3>
		</sect2>
		<sect2>
		  <title>Receiver</title>
		  <sect3>
			<title>Peer Receiver</title>
			<programlisting><![CDATA[<receiver>
  <class>peer</class>
  Checksummer
</receiver>]]></programlisting>
		  </sect3>
		  <sect3>
			<title>ShoutClient Receiver</title>
			<programlisting><![CDATA[<receiver>
  <class>shoutclient</class>
  <url>http://stream.acme-radio.org/relay.ogg</url>
  Validator
</receiver>]]></programlisting>
		  </sect3>
		  <sect3>
			<title>ShoutServer Receiver</title>
			<programlisting><![CDATA[<receiver>
  <class>shoutserver</class>
  <listenaddress>
    <host>0.0.0.0</host>
    <port>8001</port>
  </listenaddress>
  Validator
</receiver>]]></programlisting>
			<variablelist>
			  <varlistentry>
				<term><systemitem>listenaddress</systemitem></term>
				<listitem>
				  <para>
					the TCP address where the shoutcast server listens to requests. 
					The listen address will be used into the configuration of the source client.
					See <xref linkend="listen-address"/>.
				  </para>
				</listitem>
			  </varlistentry>
			</variablelist>
		  </sect3>

		  <sect3>
			<title>Encoder-Playlist Receiver</title>
			<programlisting><![CDATA[<receiver>
  <class>encoder-playlist</class>
  <url>file:///etc/freecast/playlist.m3u</url>
  <channels>2</channels>
  <quality>0</quality>
  <samplerate>44100</samplerate>
  Validator
</receiver>]]></programlisting>
			<variablelist>
			  <varlistentry>
				<term><systemitem>url</systemitem></term>
				<listitem>
				  <para>
					the URL where the playlist can be found. This playlist will be loaded and
					each specified file will be played. If you use relative file names into
					the playlist, the base url of the playlist will be used as a prefix.
					Files specified via HTTP URLs will be cached locally.
				  </para>
				</listitem>
			  </varlistentry>
			  <varlistentry>
				<term><systemitem>quality</systemitem></term>
				<listitem>
				  <para>
					the wanted quality of the encoded Ogg Vorbis stream.
					Read the dedicated <ulink url="http://www.vorbis.com/faq/#quality">Vorbis FAQ quality section</ulink>.
					Notice that only quality between 0 and 10 are supported.
				  </para>
				</listitem>
			  </varlistentry>
			  <varlistentry>
				<term><systemitem>channels</systemitem></term>
				<listitem>
				  <para>
					the channel count of the encoded stream. Set 1 for a mono stream, 2 for a stereo stream.
				  </para>
				</listitem>
			  </varlistentry>
			  <varlistentry>
				<term><systemitem>samplerate</systemitem></term>
				<listitem>
				  <para>
					specifies the sample rate of the encoded stream. 
					Set 44100 for higher quality, 22050 for medium quality.
				  </para>
				</listitem>
			  </varlistentry>
			</variablelist>
		  </sect3>

		  <sect3>
			<title>Playlist Receiver</title>
			<programlisting><![CDATA[<receiver>
  <class>playlist</class>
  <url>file:///etc/freecast/playlist.m3u</url>
  <bandwidth>35</bandwidth>
  Validator
</receiver>]]></programlisting>
			<variablelist>
			  <varlistentry>
				<term><systemitem>url</systemitem></term>
				<listitem>
				  <para>
					the URL where the playlist can be found. This playlist will be loaded and
					each specified file will be played. If you use relative file names into
					the playlist, the base url of the playlist will be used as a prefix.
					Files specified via HTTP URLs will be cached locally.
				  </para>
				</listitem>
			  </varlistentry>
			  <varlistentry>
				<term><systemitem>bandwidth</systemitem></term>
				<listitem>
				  <para>
					due to a limitation of the playlist receiver, you need to specify the bitrate
					of read files. You should take care to use files with a static bitrate.
				  </para>
				</listitem>
			  </varlistentry>
			</variablelist>
		  </sect3>

		  <sect3>
			<title>Checksummer</title>
			<sect4>
			  <title>Digest Checksummer</title>
			  <programlisting><![CDATA[<checksummer>
  <class>digest</class>
</checksummer>]]></programlisting>
			</sect4>
			<sect4>
			  <title>Signature Checksummer</title>
			  <programlisting><![CDATA[<checksummer>
  <class>signature</class>
  <privatekey>file:///etc/freecast/private.key</privatekey>
</checksummer>]]></programlisting>
			  <variablelist>
				<varlistentry>
				  <term><systemitem>privatekey</systemitem></term>
				  <listitem>
					<para>
					  the URL where the private key can be found.
					</para>
				  </listitem>
				</varlistentry>
			  </variablelist>
			</sect4>
		  </sect3>
		  <sect3>
			<title>Validator</title>
			<sect4>
			  <title>Digest Validator</title>
			  <programlisting><![CDATA[<validator>
  <class>digest</class>
</validator>]]></programlisting>
			</sect4>
			<sect4>
			  <title>Signature Validator</title>
			  <programlisting><![CDATA[<validator>
  <class>signature</class>
  <publickey>http://stream.acme-radio.org/public.key</publickey>
</validator>]]></programlisting>
			  <variablelist>
				<varlistentry>
				  <term><systemitem>publickey</systemitem></term>
				  <listitem>
					<para>
					  the URL where the public key can be found.
					</para>
				  </listitem>
				</varlistentry>
			  </variablelist>
			</sect4>
		  </sect3>
		</sect2>
		<sect2 id="node-configuration-cas">
		  <title>Connection Assistant</title>
		  <programlisting><![CDATA[<connection-assistant>
  <host>cas.freecast.org</host>
  <port>1666</port>
</connection-assistant>]]></programlisting>
		  <variablelist>
			<varlistentry>
			  <term><systemitem>host</systemitem> and <systemitem>port</systemitem></term>
			  <listitem>
				<para>
				  the host and port of the connection assistant service to be used by the node.
				</para>
			  </listitem>
			</varlistentry>
		  </variablelist>
		</sect2>
		<sect2>
		  <title>GUI Configuration</title>
		  <programlisting><![CDATA[<gui>
  <background>#ffffff</background>
  <logo>http://stream.acme-radio.org/freecast/logo.png</logo>
  <tray>http://stream.acme-radio.org/freecast/icon-24.png</tray>

  <player>
    <started>http://stream.acme-radio.org/freecast/player-started.png</started>
    <stopped>http://stream.acme-radio.org/freecast/player-stopped.png</stopped>
  </player>
</gui>]]></programlisting>
		  <variablelist>
			<varlistentry>
			  <term><systemitem>background</systemitem></term>
			  <listitem>
				<para>
				  the background color used in the window
				</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><systemitem>logo</systemitem></term>
			  <listitem>
				<para>
				  the logo displayed in the window
				</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><systemitem>tray</systemitem></term>
			  <listitem>
				<para>
				  the tray icon
				</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><systemitem>player</systemitem></term>
			  <listitem>
				<para>
				  the two icons used when the player is playing or stopped
				</para>
			  </listitem>
			</varlistentry>
		  </variablelist>
		</sect2>
		<sect2>
		  <title>Player</title>
		  <sect3>
			<title>Audio Player</title>
			<programlisting><![CDATA[<player>
  <class>audio</class>
</player>]]></programlisting>

		  </sect3>
		  <sect3>
			<title>Video Player</title>
			<programlisting><![CDATA[<player>
  <class>video</class>
  <audio>true</audio>
  <framerate>30</framerate>
</player>]]></programlisting>
			<variablelist>
			  <varlistentry>
				<term>audio</term>
				<listitem>
				  <para>must be set to false if the Ogg Theora stream doesn't contain an audio part</para>
				</listitem>
			  </varlistentry>
			  <varlistentry>
				<term>framerate</term>
				<listitem>
				  <para>specifies a video frame rate of the Ogg Theora stream</para>
				</listitem>
			  </varlistentry>
			</variablelist>
		  </sect3>
		  <sect3>
			<title>Http Player</title>
			<programlisting><![CDATA[<player>
  <class>http</class>
  <listenaddress>
    <host>0.0.0.0</host>
    <port>8000</port>
  </listenaddress>
</player>]]></programlisting>
			<variablelist>
			  <varlistentry>
				<term><systemitem>listenaddress</systemitem></term>
				<listitem>
				  <para>
					the TCP address where external players can connect to retrieve the stream. 
					See <xref linkend="listen-address"/>.
				  </para>
				</listitem>
			  </varlistentry>
			</variablelist>
		  </sect3>
		</sect2>
	</sect1>
	<sect1 id="node-configuration-samples">
		<title>Configuration samples</title>
		<para>
			The configuration sample files are part of the FreeCast distributions. See <xref linkend="install"/>.
		</para>
		<sect2>
			<title>Audio FreeCast network</title>
			<example>
				<title>Audio root node configuration sample</title>
				<programlisting><textobject><textdata fileref="samples/audio/freecast-node-root.xml"/></textobject></programlisting>
			</example>
			<example>
				<title>Audio listener node configuration sample</title>
				<programlisting><textobject><textdata  fileref="samples/audio/freecast-node-listener.xml" /></textobject></programlisting>
			</example>
			<example>
				<title>Start a FreeCast network with the Audio configuration sample</title>
			<screen><![CDATA[[host:~] ./bin/freecast-tracker &
[host:~] ./bin/freecast -config docs/examples/audio/freecast-node-root.xml &
[host:~] ./bin/freecast-swing -config docs/examples/audio/freecast-node-listener.xml]]></screen>			
			</example>
		</sect2>
		<sect2>
			<title>Video FreeCast network</title>
			<para>
			</para>
			<example>
				<title>Video root node configuration sample</title>
				<programlisting><textobject><textdata  fileref="samples/video/freecast-node-root.xml" /></textobject></programlisting>
			</example>
			<example>
				<title>Video listener node configuration sample</title>
				<programlisting><textobject><textdata  fileref="samples/video/freecast-node-listener.xml" /></textobject></programlisting>
			</example>
			<example>
				<title>Start a FreeCast network with the Audio configuration sample</title>
			<screen><![CDATA[[host:~] ./bin/freecast-tracker &
[host:~] ./bin/freecast -config docs/examples/video/freecast-node-root.xml &
[host:~] ./bin/freecast-swing -config docs/examples/video/freecast-node-listener.xml]]></screen>			
			</example>
		</sect2>
		<!-- TODO
		<sect2>
			<title>Graphical node configuration</title>
			<para>
				
			</para>
		</sect2> -->
	</sect1>
	<sect1 id="node-cli">
		<title>Command line usage</title>
		<para>
			The CLI FreeCast node can be started in command line via the command <command>freecast</command> (see <xref linkend="freecast"/>).
		</para>
	</sect1>
	<sect1 id="node-swing">
		<title>Swing usage</title>
		<para>
			The Swing FreeCast node can be started via the command <command>freecast-swing</command> (see <xref linkend="freecast"/>). 
		</para>
		<para>
			This way to start FreeCast is reserved to advanced users. Most of listeners will use the <productname>JavaWebStart</productname> deployment to start FreeCast 
			(see <xref linkend="javawebstart"/>).
		</para>
		<para>
			The Swing  FreeCast node is a <productname>Java</productname> application (and not an applet). No browser is required to start it.
		</para>
		<sect2>
			<title>Main dialog</title>
			<para>
				The FreeCast Swing interface has been designed to be simple and pleasant. No menu, no dozen buttons like a music player.
				The <interface>Main dialog</interface> allows you to:
				<itemizedlist>
					<listitem>
						<para>know which stream you're listening according to the look&amp;feel</para>
					</listitem>
					<listitem>
						<para>mute the player</para>
					</listitem>
				</itemizedlist>
				That can seem few, but these are the major functionnalities needed for a listener.
			</para>

			<screenshot>
				<screeninfo>Swing FreeCast node - Main dialog</screeninfo>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/screenshot-linux.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</screenshot>
			<screenshot>
				<screeninfo>Swing FreeCast node - Main dialog with the video player</screeninfo>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/screenshot-linux-video.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</screenshot>

			<sect3>
			  <title>Mute and relay</title>
			  <para>
				When you press the <guibutton>player button</guibutton>, 
				the audio or video stream is no longer played by your node. You can restart the player by pressing again
				the <guibutton>player button</guibutton>. The player will not restart at the same position.
				When it is muted, the player will release your sound card (to use an external
				player for instance). The FreeCast node stays connected to the FreeCast network and is able to relay other nodes. You can minimize the
				window and let the FreeCast node alive. It's a way to support the FreeCast network you are listening to because other listeners
				can be relayed.
			  </para>
			</sect3>

			<sect3>
				<title>Options bar</title>
				<para>
					Extended features are available if you click on the logo. When this option bar is opened, you can :
					<itemizedlist>
						<listitem><para>see the last log message,</para></listitem>
						<listitem><para>start the <interface>About dialog</interface>,</para></listitem>
						<listitem><para>start the <interface>Log dialog</interface>.</para></listitem>
					</itemizedlist>
				</para>
				<screenshot>
					<screeninfo>Swing FreeCast node - Opened main dialog</screeninfo>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/screenshot-linux-opened.png" format="PNG"/>
						</imageobject>
					</mediaobject>
				</screenshot>
				<para>The <interface>About dialog</interface> gives you credits information about FreeCast. 
				The <interface>Log dialog</interface> allows you to see the messages logged by FreeCast and to save them
				to a file (to illustrate a bug report for instance).</para>
			</sect3>
		</sect2>
	</sect1>
</chapter>

<chapter id="configuration">
  <title>Configuration</title>
  <para>
	There are some general considerations about the configuration of FreeCast applications. 
	Each application is configurable via XML files. These XML files follow the same logic.
  </para>
  <para>
	The configuration file only needs to complete and overwrite the default configuration of 
	the application.
  </para>
  <sect1>
	<title>Common configuration elements</title>
	<sect2>
	  <title>Network elements</title>
	  <sect3>
		<title>Host</title>
		<para>
		  Host elements used into the FreeCast configuration designate an IP address over a IP network 
		  (like your local network or Internet). Hosts can be specified via either host names or IP addresses. 
		  As usually, host names will be resolved by FreeCast applications.
		</para>
		<example>
		  <title>Host configurations</title>
		  <programlisting><![CDATA[<host>82.68.47.19</host>]]></programlisting>
		  <programlisting><![CDATA[<host>stream.acme-radio.org</host>]]></programlisting>
		</example>
		<para>
		  This information can be used by FreeCast applications in another context than your 
		  local network. Don't use local host names or local IP addresses in a configuration file 
		  which must be used over Internet.
		</para>
	  </sect3>
	  <sect3>
		<title>Port</title>
		<para>
		  Port elements designate a TCP port or a port selection:
		  <itemizedlist>
			<listitem>
			  <para>
				A single port is designated by a number.
			  </para>
			</listitem>
			<listitem>
			  <para>
				A port range is defined by a lower and an higher port separated by a <constant>-</constant>.
			  </para>
			</listitem>
			<listitem>
			  <para>
				A random port range is defined by a lower and an higher port separated by a <constant>~</constant>.
			  </para>
			</listitem>
			<listitem>
			  <para>
				A port selection can contain one or more ports or port ranges separated by a <constant>,</constant>.
			  </para>
			</listitem>
		  </itemizedlist>
		</para>
		<example>
		  <title>Port configurations</title>
		  <programlisting><![CDATA[<port>1665</port>]]></programlisting>
		  <programlisting><![CDATA[<port>1664,1666-1680</port> <!-- port 1664 or from 1666 to 1670 -->]]></programlisting>
		  <programlisting><![CDATA[<port>30000~30100</port> <!-- port from 30000 to 30100 choosed randomly -->]]></programlisting>
		</example>
	  </sect3>
	  <sect3 id="listen-address">
		<title>Listen TCP address</title>
		<programlisting><![CDATA[<listenaddress>
  <host>0.0.0.0</host>
  <port>1665</port>
</listenaddress>]]></programlisting>
		<variablelist>
		  <varlistentry>
			<term><systemitem>host</systemitem></term>
			<listitem>
			  <para>
				the listen IP address. The default is 0.0.0.0, connections will be listened over all 
				network interfaces. By choosing a specific address, you can limit the reachability. 
				For instance, You can use localhost to limit the reachability to your computer. 
				Don't modify this default parameter unless you have a specific need. 
			  </para>
			</listitem>
		  </varlistentry>
		  <varlistentry>
			<term><systemitem>port</systemitem></term>
			<listitem>
			  <para>
				the TCP port used to listen and receive requests from other FreeCast applications. 
				By using a port selection, you can avoid problems with ports already used by other applications. 
				In this case, the first free port will be used.
			  </para>
			</listitem>
		  </varlistentry>
		</variablelist>
		<para>
		  The choice of a listen address must be compatible with your network configuration. 
		  Listening connections on a computer behind a router or a firewall can require a manual
		  configuration step about the related software or hardware.
		</para>
	  </sect3>
	  <sect3 id="target-address">
		<title>Target TCP address</title>
		<programlisting><![CDATA[<listenaddress>
  <host>freecast.acme-radio.org</host>
  <port>1665</port>
</listenaddress>]]></programlisting>
		<variablelist>
		  <varlistentry>
			<term><systemitem>host</systemitem></term>
			<listitem>
			  <para>
				by default, the target host is localhost.
			  </para>
			</listitem>
		  </varlistentry>
		  <varlistentry>
			<term><systemitem>port</systemitem></term>
			<listitem>
			  <para>
				you must specify the port where the requests are listened to by the remote host.
				You can't use a port selection.
			  </para>
			</listitem>
		  </varlistentry>
		</variablelist>
	  </sect3>
	</sect2>
  </sect1>
</chapter>

<chapter id="javawebstart">
	<title><productname>JavaWebStart</productname> deployment</title>
	<sect1 id="javawebstart-overview">
		<title>Overview</title>
		<sect2>
			<title><productname>JavaWebStart</productname> in few words</title>
			<para>
				<productname>JavaWebStart</productname> is a launcher whih allows users to start <productname>Java</productname>
				applications by a single click on a website. To sum-up quickly, the user's browser downloads 
				a <filename class="extension">jnlp</filename> file on a website. This file contains a technical description of the 
				application to be started. <productname>JavaWebStart</productname> (which should be associated to this kind of file)
				starts by reading this file. It starts a GUI to make the user follow the starting process. 
				Then, it downloads the necessary files, validates the numeric signature, asks the user to confirm the application 
				execution and ... starts the application.
			</para>
			<screenshot>
				<screeninfo><productname>JavaWebStart</productname> FreeCast start</screeninfo>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/jws15-freecast-start.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</screenshot>
			<para>
				<productname>JavaWebStart</productname> allows the user to restart easily a previously started application.
				If the user restarts an application, previously downloaded files are used. Needed updates are performed automatically.
				The user can consult the list of known applications with the <productname>JavaWebStart</productname> 
				<application>Cache Application Viewer</application>.
			</para>
			<screenshot>
				<screeninfo><productname>JavaWebStart</productname> <application>Cache Application Viewer</application></screeninfo>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/jws15-cacheviewer.png" format="PNG"/>
					</imageobject>
				</mediaobject>
			</screenshot>
			<para>
				<productname>JavaWebStart</productname> is a product of Sun Microsystems. It's included into the Java Runtime Environment.
				Visit the product homepage <ulink url="http://java.sun.com/products/javawebstart/"/>
			</para>
		</sect2>
		<sect2>
			<title>Benefits for FreeCast deployment</title>
			<para>
				The <productname>JavaWebStart</productname> deployment of FreeCast allows to provide a <emphasis>turnkey solution</emphasis> 
				for the end-users (your listeners):
				<itemizedlist>
					<listitem><para>Listeners can install FreeCast as simply as possible.</para></listitem>
					<listitem><para>They always use the right and the last FreeCast release without effort.</para></listitem>
					<listitem><para>Even if they use FreeCast for several networks, they only download once the FreeCast application.</para></listitem>
				</itemizedlist>
			</para>
			<para>
				You just need to make available a small xml file (see in <xref linkend="descriptor"/>)
				on your website, include a link to the FreeCast start page (see in <xref linkend="startpage"/>).
				You won't consume bandwith because the needed files are downloaded from the <ulink url="http://download.freecast.org"/>.
			</para>
		</sect2>
	</sect1>
	<sect1 id="descriptor">
		<title>Stream description file</title>
		<para>Let's assume some information about your stream :
			<itemizedlist>
				<listitem><para>your webradio is named <literal>Acme Radio</literal></para></listitem>
				<listitem><para>your website is <literal>http://acme-radio.org/</literal></para></listitem>
				<listitem><para>your tracker is available at <literal>freecast.acme-radio.org:1665</literal></para></listitem>
				<listitem><para>you're running the <literal>freecast-@version@</literal> release</para></listitem>
			</itemizedlist>
		</para>
		<para>In this case, your stream description file should look like this:</para>
		<example>
			<title>Minimalist stream description</title>
			<programlisting><![CDATA[<stream>
 <name>Acme Radio</name>
 <homepage>http://acme-radio.org/</homepage>
 <tracker>
  <host>acme-radio.org</host>
  <port>1665</port>
 </tracker>
 <jnlp>
  <version>@version@</version>
 </jnlp>
</stream>]]></programlisting>
		</example>
		<para>
			This stream description must be published on your website. In our example, 
			it's published at <literal>http://acme-radio.org/freecast/descriptor.xml</literal>.
		</para>
		<sect2>
			<title>Stream description option list</title>	
			<para>These are all the options you can use into the stream description file.</para>
			<table tocentry="1">
				<title>Stream description</title>
				<tgroup cols="2">
				<colspec colname="name" colwidth="0*"/>
				<colspec colname="comments" colwidth="1*"/>
				<thead>
					<row>
						<entry>parameter name</entry>
						<entry>comments</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>name</entry>
						<entry>a short description of the stream</entry>
					</row>
					<row>
						<entry>homepage</entry>
						<entry>the URL of your website or the page dedicated to the FreeCast stream for instance</entry>
					</row>
					<row>
						<entry>tracker.host</entry>
						<entry>the host where your tracker is running</entry>
					</row>
					<row>
						<entry>tracker.port</entry>
						<entry>the port where your tracker is running (optional if the default port <literal>1665</literal> is used)</entry>
					</row>
					<row>
						<entry>config</entry>
						<entry>the URL of the node configuration file that the listener nodes must use</entry>
					</row>
					<row>
						<entry>jnlp.version</entry>
						<entry>the FreeCast release you're using for tracker and your root node. Important in order to make your listeners run a compatible release.</entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			<important>
			  <title>Version</title>
			  <para>
				The <option>jnlp.version</option> option is important to make your listeners run a compatible FreeCast release.
				Take care to update it when you upgrade the tracker and root node release.
			  </para>
			</important>
		</sect2>
		<sect2>
			<title>Advanced examples</title>
			<para>There are some examples of streaming configuration files.</para>
			<sect3>
				<title>Specify a node configuration file</title>
				<para>You can specify a node configuration file to override the default one. See <xref linkend="node-configuration"/>.</para>
				<example>
					<title>Streaming description with a node configuration file</title>
					<programlisting><![CDATA[<stream>
   <name>acme Radio</name>
   <homepage>http://acme-radio.org/</homepage>
   <jnlp>
    <version>@version@</version>
    <config>http://acme-radio.org/freecast/config.xml</config>
   </jnlp>
  </stream>]]></programlisting>
				</example>
				<para>
					There is a possible node configuration file. It will used by the node listeners as specified in the previous stream configuration file.
					It activates the stream signature and the http player.
				</para>
				<example>
					<title>A possible node configuration file</title>
					<programlistingco>
						<areaspec>
							<area id="area.tracker" units="linecolumn" coords="5"/>
							<area id="area.signature" units="linecolumn" coords="11"/>
							<area id="area.signature.publickey" units="linecolumn" coords="13"/>
							<area id="area.httpplayer" units="linecolumn" coords="19"/>
							<area id="area.httpplayer.port" units="linecolumn" coords="21"/>
						</areaspec>
						<programlisting><![CDATA[<freecast>
 <node>
  <peerprovider>
   <trackeraddress>
    <host>acme-radio.org</host>
   </trackeraddress>
  </peerprovider>
  <receiver>
   <class>peer</class>
   <validator>
    <class>signature</class>
    <publickey>
      http://acme-radio.org/freecast/public.key
    </publickey>
   </validator>
  </receiver>
  <players>
   <player>
    <class>http</class>
    <listenaddress>
     <port>8001</port>
    </listenaddress>
   </player>
  </players>
 </node>
</freecast>]]></programlisting>
						<calloutlist>
							<callout arearefs="area.tracker">
								<para>set the tracker host (needed if the <option>tracker.host</option> about it isn't used in the stream configuration file)</para>
							</callout>
							<callout arearefs="area.signature area.signature.publickey">
								<para>activate the stream validator by signature and specifies the public key to be used</para>
							</callout>
							<callout arearefs="area.httpplayer area.httpplayer.port">
								<para>activate the HTTP player and specifies the port to be used</para>
							</callout>
						</calloutlist>
					</programlistingco>
				</example>
				<para>This is only a configuration sample, see <xref linkend="node-configuration"/> for more information.</para>
			</sect3>
		</sect2>
	</sect1>
	<sect1 id="startpage">
		<title>Start page</title>
		<para>
			Now that you have a stream descriptor file, you can use it into your web site to give listeners access to your stream.
			To facilitate the FreeCast node startup from websites, the FreeCast provides a customizable <emphasis>start page</emphasis>.
			You don't need to try to explain the install process or add links to the installation pages on the FreeCast website.
			Just use the <emphasis>start page</emphasis> which will be automatically customized with the information provided 
			by your stream descriptor file.
		</para>
		<para>
			The FreeCast website provides a small javascript function which allows you to create links to the start page
			by specifying the <emphasis>hostname and path of your stream descriptor file</emphasis>. For instance, if your descriptor is
			available at <systemitem>http://acme-radio.org/freecast/descriptor.xml</systemitem>, you must only specify 
			<systemitem>acme-radio.org/freecast/descriptor.xml</systemitem>.
		</para>
		<example>
			<title>Use the start page in a web page</title>
			<programlisting><![CDATA[<html>
  <head>
    ...
    <script type="text/javascript" src="http://www.freecast.org/start.js"></script>
  </head>
  <body>
    ...
    <a href="javascript:start('acme-radio.org/freecast/descriptor.xml')">FreeCast stream</a>
    ...
  </body>
</html>]]></programlisting>
		</example>
		<para>See the FreeCast <ulink url="http://www.freecast.org/listen">listen page</ulink> source for a real example.</para>
	</sect1>
</chapter>
<chapter id="samples">
	<title>Source samples</title>
	<sect1 id="samples-clients">
		<title>Source clients</title>
		<para>
			A source client can be used to create the Ogg stream broadcasted on the FreeCast network.
			You need to configure your root node with a <systemitem>shoutserver</systemitem> <systemitem>receiver</systemitem>
			(see <xref linkend="receiver-shoutserver"/>) 
			and configure the source client to send the stream to the port where the node waits for the connection.
		</para>
		<sect2>
			<title>Ices</title>
			<para>
				<application>ices2</application> is a very robust source client used commonly with the famous <application>icecast</application>.
			</para>
			<para>
				Visit the <application>ices2</application> website to know more about this tool: <ulink url="http://icecast.org/ices.php"/>.
			</para>
			<example>
				<title>Ices2 sample configuration</title>
				<programlisting><![CDATA[<ices>
    <loglevel>4</loglevel>
    <consolelog>1</consolelog>
  
    <stream>
      <metadata>
        <name>FreeCast Stream</name>
        <genre></genre>
        <description></description>
      </metadata>
  
      <input>
        <module>alsa</module>
        <param name="rate">44100</param>
        <param name="channels">2</param>
        <param name="device">default</param>
      </input>
  
      <instance>
        <hostname>127.0.0.1</hostname>
        <port>8000</port>
        <password>changeme</password>
        <mount>/stream.ogg</mount>
        <reconnectdelay>2</reconnectdelay>
        <reconnectattempts>5</reconnectattempts>
              
        <downmix>1</downmix>
          
        <encode>  
          <quality>0</quality>
          <samplerate>44100</samplerate>
          <channels>1</channels>
        </encode>
      </instance>
    </stream>
  </ices>]]></programlisting>
			</example>
			<sect3>
				<title>Jack support</title>
				<para>
					A very powerful feature of <application>ices2</application> is the jack support which allows to create a sound stream
					retrieved from a jack server. By this way, you can integrate a lot of sound tools from a simple player like 
					<ulink url="http://www.xmms.org/">Xmms</ulink> to a complete radio broadcast automation solution like 
					<ulink url="http://www.salemradiolabs.com/rivendell/">Rivendell</ulink>.
				</para>
				<para>
					This support is for the moment present into the ices-kh branch. You can know more
					about this ices branch on <ulink url="http://ices.reboot.fm/"/>. Visit the <ulink url="http://jackit.sf.net">jack website</ulink>
					to know more about this technology.
				</para>
			</sect3>
		</sect2>
		<sect2>
			<title>OddCast</title>
			<para>
			  <ulink url="http://www.oddsock.org">OddSock.org</ulink> provides a lot of streaming tools for the Windows platforms.
			  <application>oddcast</application> is a standalone application or a <productname>WinAmp</productname> plugin 
			  which creates a Ogg stream from the line input or from what <productname>WinAmp</productname> is playing.
			</para>
			<para>
			  Visit the <application>oddcast</application> website: <ulink url="http://www.oddsock.org/tools/oddcastv3/"/>.
			</para>
			<para>
			  Watch <ulink url="http://www.freecast.org/screencasts">FreeCast screencasts</ulink> dedicated to the OddCast
			  and FreeCast collaboration.
			</para>
		</sect2>
		<sect2>
			<title>StreamTranscoder</title>
			<para>
				<application>streamtranscoder</application> is a very useful tool to create a Ogg stream from an existing stream.
			</para>
			<para>
				Visit the <application>streamtranscoder</application> website: <ulink url="http://www.oddsock.org/tools/streamTranscoder/"/>
			</para>
		</sect2>
	</sect1>
	<sect1 id="samples-servers">
		<title>Source servers</title>
		<para>
			The Ogg stream broadcasted on the FreeCast network can be retrieved on a source server.
			You need to configure your root node with a <systemitem>shoutclient</systemitem> <systemitem>receiver</systemitem>
			(see <xref linkend="receiver-shoutclient"/>) by specifying the stream URL and other needed parameters.
		</para>
		<sect2>
			<title>IceCast</title>
			<para>
				<application>icecast</application> is one of the most famous streaming servers. 
				Visit the <application>icecast</application> website: <ulink url="http://www.icecast.org"/>.
			</para>
		</sect2>
		<sect2>
			<title>Flumotion</title>
			<para>
				<application>flumotion</application> is a streaming media server which allows to create Ogg Theora video streams.
				Visit the <application>flumotion</application> website: <ulink url="http://www.flumotion.net"/>.
			</para>
		</sect2>
	</sect1>
</chapter>
<reference id="refentry">
	<title>Reference Pages</title>
	<refentry id="freecast">
		<refmeta>
			<refentrytitle>freecast</refentrytitle>
			<manvolnum>1</manvolnum>
		</refmeta>
		
		<refnamediv>
			<refname>freecast</refname>
			<refpurpose>starts a FreeCast node with a command line interface (<acronym>CLI</acronym>)</refpurpose>
		</refnamediv>
		<!--
		<refnamediv>
			<refname>freecast-tracker</refname>
			<refpurpose>starts a FreeCast tracker to manage a dedicated FreeCast network</refpurpose>
		</refnamediv>
		<refnamediv>
			<refname>freecast-swing</refname>
			<refpurpose>starts a FreeCast node with a graphical user interface (<acronym>GUI</acronym>)</refpurpose>
		</refnamediv> -->
		
		<refsynopsisdiv>
			<cmdsynopsis>
				<command>freecast</command>
				<arg>-config <replaceable>file/url</replaceable></arg>
				<arg>-D<replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
				<arg>-dryrun</arg>
				<command>freecast-tracker</command>
				<arg>-config <replaceable>file/url</replaceable></arg>
				<arg>-D<replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
				<arg>-dryrun</arg>
				<command>freecast-swing</command>
				<arg>-config <replaceable>file/url</replaceable></arg>
				<arg>-D<replaceable>property</replaceable>=<replaceable>value</replaceable></arg>
				<arg>-dryrun</arg>
			</cmdsynopsis>
		</refsynopsisdiv>
		
		<refsect1>
			<title>Description</title>
			<para>
				Starts the related FreeCast application (tracker, node cli or node swing) according to the 
				used command. The application configuration can be controled via related options.
			</para>
		</refsect1>

		<refsect1>
			<title>Options</title>
			<variablelist>
				<varlistentry>
					<term>-config <replaceable>file</replaceable> or <replaceable>url</replaceable></term>
					<listitem>
						<para>Loads the specified configuration. Can be a file or an URL.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>-D<replaceable>property</replaceable>=<replaceable>value</replaceable></term>
					<listitem>
						<para>Overrides the specified configuration property by the given value.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>-dryrun</term>
					<listitem>
						<para>Configures the FreeCast application and stops it. Useful to test the configuration.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</refsect1>
		
		<refsect1>
			<title>Notes</title>
			<para>
				Used URLs can use any protocol supported by the JVM 
				(<systemitem>file:</systemitem>, <systemitem>http:</systemitem>, <systemitem>ftp:</systemitem>, etc ...).
			</para>
		</refsect1>
	</refentry>
</reference>
<xi:include  href="gpl.xml" xmlns:xi="http://www.w3.org/2003/XInclude"/> 
<!-- TODO
<glosssary>
</glossary> -->
<index/>
</book>
