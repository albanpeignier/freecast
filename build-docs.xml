<project xmlns:ivy="antlib:fr.jayasoft.ivy.ant" name="freecast-docs" default="dist.docs" basedir=".">

	<!-- don't use this build file directly, use build-complete.xml -->

  <target name="prepare.docbook" depends="prepare.docbook.retrieve, prepare.docbook.install">
  	<path id="path.docbook">
  		<fileset dir="lib/build-docbook"/>
  	</path>
		<property name="track.docbook.dir" location="lib/build-docbook/docbook-xsl" />
		
		<macrodef name="docbook">
			<attribute name="in" />
			<attribute name="out" />
			<attribute name="style" />
			<element name="arguments" optional="true" />
			<sequential>

				<java classname="org.apache.xalan.xslt.Process" fork="true" failonerror="true" output="build/docbook.log" append="true">
					<jvmarg line="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration" />
					<jvmarg 
	line="-Xbootclasspath/p:lib/build-docbook/xercesImpl.jar;lib/build-docbook/xml-apis.jar" />
					<classpath>
						<fileset dir="lib/build-docbook">
							<include name="xalan.jar"/>
						</fileset>
						<pathelement path="${track.docbook.dir}/extensions/xalan25.jar" />
					</classpath>

					<arg line="-IN @{in}" />
					<arg line="-OUT @{out}" />
					<arg line="-XSL @{style}" />
					<arg line="-PARAM admon.graphics 1" />
					<arg line="-PARAM use.extensions 1" />
					<arguments />
				</java>

			</sequential>
		</macrodef>		
		
  </target>
  
  <target name="prepare.docbook.retrieve">
  	<ivy:configure />
  	<ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="build-docbook" />
  </target>
  
  <target name="prepare.docbook.install.check">
  	<uptodate property="prepare.docbook.install.notRequired"
            srcfile="lib/build-docbook/docbook-xsl.zip"
            targetfile="lib/build-docbook/docbook-xsl/.touch"/>
  </target>
  
  <target name="prepare.docbook.install" 
  	depends="prepare.docbook.install.check" unless="prepare.docbook.install.notRequired">
  	<tempfile property="prepare.docbook.dir"/>
  	<mkdir dir="${prepare.docbook.dir}"/>
  	<unzip src="lib/build-docbook/docbook-xsl.zip" dest="${prepare.docbook.dir}"/>
  	<move todir="lib/build-docbook/docbook-xsl">
  		<fileset dir="${prepare.docbook.dir}"/>
	  	<regexpmapper from="^docbook-xsl-[0-9\.]+/(.*)$$" to="\1"/>
	  </move>
	  <delete dir="${prepare.docbook.dir}"/>
	  <touch file="lib/build-docbook/docbook-xsl/.touch"/>
  </target>
  
  <target name="prepare.xmlreleasenotes" depends="prepare.ivy">
  	<ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="build-xmlreleasenotes" />
  	<taskdef classname="org.xrn.ant.XMLReleaseNotes" name="xrn">
  		<classpath>
  			<fileset dir="lib/build-xmlreleasenotes"/>
  		</classpath>
  	</taskdef>
  </target>

	<target name="build.changelog" depends="prepare.xmlreleasenotes">
  	<property name="build.changelog.xrn.dir" value="lib/build-xmlreleasenotes/xmlreleasenotes"/>
		<mkdir dir="${build.changelog.xrn.dir}" />
		<xrn destination="${build.changelog.xrn.dir}" deploy="true" />

		<mkdir dir="build/xmlreleasenotes"/>

		<style in="source/org/kolaka/freecast/changelog.xml" out="build/xmlreleasenotes/changelog.html" style="${build.changelog.xrn.dir}/XMLReleaseNotes2HTML.xsl" />

		<mkdir dir="build/changelog"/>

		<tidy dest="build/changelog" failonerror="false" encoding="latin1">
			<filesets>
				<fileset dir="build/xmlreleasenotes"/>
			</filesets>
		</tidy>
		
		<copy tofile="build/changelog/stylesheet.css" file="${build.changelog.xrn.dir}/XMLReleaseNotes.css" />
	</target>

	<target name="build.docs" depends="build.docs.api, build.docs.xref, build.docs.coverage, build.docs.userguide" />

	<target name="build.docs.api.check">
		<uptodate property="build.docs.api.notRequired" targetfile="build/docs/api/.touch">
			<srcfiles dir="source">
				<include name="**/*.java" />
				<include name="**/package.html" />
				<include name="docfiles/**" />
			</srcfiles>
		</uptodate>
	</target>

	<target name="build.docs.api" depends="prepare.libraries, build.docs.api.check" unless="build.docs.api.notRequired">
		<mkdir dir="build/docs/api" />

		<javadoc packagenames="org.kolaka.freecast.*" sourcepath="source" destdir="build/docs/api" author="true" use="true">
			<link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
			<classpath refid="path.test" />
			<tag name="todo" description="To do:"/>
		</javadoc>

		<touch file="build/docs/api/.touch" />
	</target>

	<target name="build.docs.userguide" depends="build.docs.userguide.html,build.docs.userguide.pdf" />

	<target name="build.docs.userguide.prepare" depends="prepare.docbook, prepare.version">
		<mkdir dir="build/docs/userguide" />
		<tstamp>
			<format property="build.docs.userguide.pubdate" pattern="EEEE, MMMM d yyyy" locale="en" />
		</tstamp>
		<copy todir="build/docs/userguide" flatten="true">
			<fileset dir="source">
				<include name="org/kolaka/freecast/userguide/userguide.xml" />
				<include name="org/kolaka/freecast/userguide/gpl.xml" />
			</fileset>
			<filterset>
				<filter token="pubdate" value="${build.docs.userguide.pubdate}" />
				<filter token="version" value="${project.version}" />
			</filterset>
		</copy>
		<copy todir="build/docs/userguide" flatten="true">
			<fileset dir="source">
				<include name="org/kolaka/freecast/userguide/*.xsl" />
			</fileset>
			<filterset>
				<filter token="docbook.xsl.dir" value="${track.docbook.dir}" />
			</filterset>
		</copy>
		<copy todir="build/docs/userguide">
			<fileset dir="source/org/kolaka/freecast/config/resources">
				<include name="defaults-tracker.xml" />
			</fileset>
			<fileset dir="source/org/kolaka/freecast/config">
				<include name="samples/**" />
			</fileset>
			<filterchain>
				<!--
				<tokenfilter>
					<filetokenizer/>
					<replaceregex pattern="(.*)"
	                    flags="s"
	                    replace="&lt;programlisting&gt;&lt;![CDATA[\1]]&gt;&lt;/programlisting&gt;"/>
				</tokenfilter>
				-->
				<tokenfilter>
					<replaceregex pattern="\t" flags="gs" replace="  " />
				</tokenfilter>
			</filterchain>
		</copy>
		<copy todir="build/docs/userguide/images">
			<fileset dir="${track.docbook.dir}/images">
				<include name="**/*.png" />
				<present targetdir="source/org/kolaka/freecast/userguide/images" present="srconly" />
			</fileset>
			<fileset dir="source/org/kolaka/freecast/userguide/images" />
		</copy>
		<copy todir="build/docs/userguide/images">
			<fileset dir="source/org/kolaka/freecast/node/swing/install">
				<include name="screenshot-linux-20050322*.png" />
				<include name="screenshot-linux-20050911*.png" />
			</fileset>
			<fileset dir="source/org/kolaka/freecast/manager/gui/install">
				<include name="manager*-screenshot-linux-20050911*.png" />
				<include name="manager*-screenshot-linux-20060513*.png" />
			</fileset>
			<mapper type="regexp" from="^(.*)-[0-9]+(.*)" to="\1\2" />
		</copy>
		<copy todir="build/docs/userguide/images" flatten="true">
			<fileset dir="source/org/kolaka/freecast/node/swing/install">
				<include name="jws/jws15*" />
			</fileset>
		</copy>
	</target>

	<target name="build.docs.userguide.html.validate" depends="build.docs.userguide.html.check" unless="build.docs.userguide.html.notRequired">
		<xmlvalidate failonerror="yes" lenient="yes" warn="yes" file="build/docs/userguide/userguide.xml">
		  <!--
		  <dtd publicId="-//OASIS//DTD DocBook XML V4.1.2//EN"
			   location="${track.docbook.dtd.dir}/docbookx.dtd"/>
		  -->	   
		</xmlvalidate>
	</target>

	<target name="build.docs.userguide.html.check">
		<uptodate property="build.docs.userguide.html.notRequired" targetfile="build/docs/userguide/index.html">
			<srcfiles dir="build/docs/userguide" />
		</uptodate>
	</target>

	<target name="build.docs.userguide.html" depends="build.docs.userguide.prepare, build.docs.userguide.html.check, build.docs.userguide.html.validate, build.docs.userguide.html.copy" unless="build.docs.userguide.html.notRequired">
		<docbook in="build/docs/userguide/userguide.xml" out="build/docs/userguide/index.html" style="build/docs/userguide/userguide-html.xsl">
			<arguments>
				<arg line="-PARAM hunker.output.encoding UTF-8" />
				<arg line="-PARAM chunk.tocs.and.lots 1" />
				<arg line="-PARAM html.stylesheet css/screen.css" />
				<arg line="-PARAM use.id.as.filename 1" />
				<arg line="-PARAM navig.graphics 1" />
				<arg line="-PARAM navig.graphics.extension .png" />
				<arg line="-PARAM callouts.extension 1" />
				<arg line="-PARAM textinsert.extension 1" />
				<arg line="-PARAM callout.defaultcolumn 40" />
				<arg line="-PARAM callout.graphics 1" />
				<arg line="-PARAM ignore.image.scaling 1"/>
			</arguments>
		</docbook>
	</target>

	<target name="build.docs.userguide.html.copy">
		<copy todir="build/docs/userguide">
			<fileset dir="source/org/kolaka/freecast/userguide">
				<include name="css/*" />
			</fileset>
		</copy>
	</target>

	<target name="build.docs.userguide.pdf.check">
		<uptodate property="build.docs.userguide.pdf.notRequired" targetfile="build/docs/userguide/userguide.pdf">
			<srcfiles dir="build/docs/userguide">
				<include name="**/*.xml" />
			</srcfiles>
		</uptodate>
	</target>

	<target name="build.docs.userguide.pdf" depends="build.docs.userguide.prepare, build.docs.userguide.pdf.check" unless="build.docs.userguide.pdf.notRequired">
		<docbook in="build/docs/userguide/userguide.xml" out="build/docs/userguide/userguide.fo" style="${track.docbook.dir}/fo/docbook.xsl">
			<arguments>
				<arg line="-PARAM paper.type A4" />
				<arg line="-PARAM fop.extensions 1"/>
				<arg line="-PARAM double.sided 1"/>
			</arguments>
		</docbook>

		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="lib/build-docbook" includes="*.jar"/>
			</classpath>
		</taskdef>
		<fop format="application/pdf" fofile="build/docs/userguide/userguide.fo" outfile="build/docs/userguide/userguide.pdf" basedir="build/docs/userguide" />
	</target>

	<target name="build.docs.xref.check">
		<uptodate property="build.docs.xref.notRequired" targetfile="build/docs/xref/.touch">
			<srcfiles dir="source">
				<include name="**/*.java" />
			</srcfiles>
		</uptodate>
	</target>

	<target name="build.docs.xref" depends="build.docs.xref.check" unless="build.docs.xref.notRequired">
  	<ivy:retrieve pattern="lib/[conf]/[artifact].[ext]" conf="build-antjxr" />
    <unzip dest="lib/build-antjxr">
    	<fileset dir="lib/build-antjxr" includes="ant-jxr-data*.zip"/>
    </unzip>
    <taskdef name="jxr" classname="org.kolaka.ant.jxr.Jxr">
			<classpath>
				<fileset dir="lib/build-antjxr"/>
			</classpath>    
    </taskdef>

		<mkdir dir="build/docs/xref" />

		<jxr sourcedir="source" destdir="build/docs/xref" templatedir="lib/build-antjxr/templates" windowTitle="Kolaka - FreeCast" docTitle="FreeCast" bottom="Copyright 2004-2006. Alban Peignier" />

		<copy todir="build/docs/xref">
			<fileset dir="lib/build-antjxr/resources" />
		</copy>

		<touch file="build/docs/xref/.touch" />
	</target>

	<target name="build.docs.coverage.check">
		<uptodate property="build.docs.coverage.notRequired" targetfile="build/docs/coverage/.touch">
			<srcfiles dir="source">
				<include name="**/*.java" />
			</srcfiles>
			<srcfiles dir="${build.core.classes.dir}" />
		</uptodate>
	</target>
	
	<target name="build.docs.coverage" depends="prepare.libraries, build.test, build.docs.coverage.check" unless="build.docs.coverage.notRequired" if="build.docs.coverage.required">
		<taskdef resource="tasks.properties">
			<classpath refid="path.coverage" />
		</taskdef>

		<mkdir dir="build/coverage" />

		<instrument todir="build/coverage">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${build.core.classes.dir}">
				<include name="**/*.class" />
				<exclude name="**/test/*.class" />
				<exclude name="**/Main.class" />
				<exclude name="**/swing/*.class" />
				<exclude name="**/*Exception.class" />
				<exclude name="**/RMITracker_*.class" />
			</fileset>
		</instrument>

		<mkdir dir="build/docs/coverage" />
		<junit printsummary="no" haltonfailure="no" includeantruntime="yes" fork="yes">
			<batchtest todir="build/docs/coverage">
				<fileset dir="source">
					<include name="**/test/*Test.java" />
					<include name="**/test/*TestSuite.java" />
					<exclude name="**/test/*BaseTest.java" />
				</fileset>
			</batchtest>
			<classpath>
				<pathelement path="build/coverage" />
				<pathelement path="${build.core.classes.dir}" />
				<pathelement path="${build.test.classes.dir}" />
				<path refid="path.coverage" />
			</classpath>
		</junit>

		<report srcdir="source" destdir="build/docs/coverage" />

		<touch file="build/docs/coverage/.touch" />
	</target>

	<target name="dist.docs" depends="build.docs, build.changelog">
		<copy todir="dist/docs" includeEmptyDirs="false">
			<fileset dir="build/docs">
				<exclude name="**/.touch" />
				<exclude name="userguide/**/*.xml" />
				<exclude name="userguide/**/*.xsl" />
				<exclude name="userguide/*.fo" />
				<exclude name="userguide/*.html" />
				<exclude name="api/**/*.html" />
			</fileset>
			<fileset dir="build/changelog" />
		</copy>
		<copy todir="dist/docs" includeEmptyDirs="true">
			<fileset dir="build/docs">
				<exclude name="api/**/*.html" />
			</fileset>
		</copy>
		<!-- too verbose <tidy dest="dist/docs" failonerror="false"> 
			<filesets> -->
		<copy todir="dist/docs">
				<fileset dir="build/docs">
					<include name="userguide/*.html" />
					<include name="api/**/*.html" />
				</fileset>
		</copy>
		<!--	</filesets>
		</tidy> -->

		<!-- TODO find a better way -->
		<mkdir dir="dist/docs/examples/audio"/>
		<mkdir dir="dist/docs/examples/video"/>
		<mkdir dir="dist/docs/examples/tracker"/>

		<xmltidy dest="dist/docs/examples">
		  <filesets>
			<fileset dir="source/org/kolaka/freecast/config/samples">
				<include name="**/*.xml" />
			</fileset>
		  </filesets>
		</xmltidy>

		<mkdir dir="dist/docs/examples/jws"/>
		<xmltidy dest="dist/docs/examples/jws">
		  <filesets>
			<fileset dir="source/org/kolaka/freecast/node/swing">
				<include name="config.xml" />
				<include name="descriptor.xml" />
			</fileset>
		  </filesets>
		</xmltidy>
	</target>

	<macrodef name="tidy">
		<attribute name="dest" />
		<attribute name="failonerror" default="true" />
		<attribute name="encoding" default="utf8" />
		<element name="filesets" optional="false" />
		<sequential>
			<apply executable="tidy" dest="@{dest}" failonerror="@{failonerror}" output="build/tidy.log" append="true">
				<arg line="-quiet -@{encoding} -wrap 100" />
				<arg value="-o" />
				<targetfile />
				<srcfile />
				<filesets />
				<mapper type="identity" />
			</apply>
		</sequential>
	</macrodef>

	<macrodef name="xmltidy">
		<attribute name="dest" />
		<attribute name="failonerror" default="true" />
		<element name="filesets" optional="false" />
		<sequential>
			<apply executable="tidy" dest="@{dest}" failonerror="@{failonerror}" output="build/tidy.log" append="true">
				<arg line="-xml -quiet -utf8 -wrap 100 -indent -errors" />
				<arg value="-o" />
				<targetfile />
				<srcfile />
				<filesets />
				<mapper type="identity" />
			</apply>
		</sequential>
	</macrodef>
	
</project>
